Project Information

> > > Project Name = ERP-CRM_1
> > > Use GitHub desktop

ความสามารถของเว็บแอพที่ต้องการ

1. ระบบบัญชี ERP และ CRM โดยใช้ฐานข้อมูลที่สามารถทำงานแบบออฟไลน์ และโปรแกรมก็สามารถทำงาน offline
   2.ฟีเจอร์ของระบบ (side bar menu)
   มีดังนี้
   1.00 ฝ่ายขาย
   1.01 รานการสินค้า
   1.02 รายการลูกค้า
   1.03 ใบเสนอราคา
   1.04 ใบเจ้งหนี้ใบ/ใบวางบิล
   1.05 รายการใบส่งงาน
   1.06 ใบส่งของ
   1.07 ใบเสร็จรับเงิน
   1.08 ใบหักภาษี ณ ที่จ่าย
   1.09 รายการลูกค้านัดจ่าย
   1.10 รายการลูกค้านัดชำระ
   1.11 รายการรอวางบิล
   1.12 รายการยอดขาย
   1.13 ตั้งค่า หักภาษี
   1.14 ตั้งค่า การชำระเงิน
   1.15 ตั้งค่าหน่วยนับสินค้า
   2.00 ฝ่ายจัดซื้อ
   2.01 รายการสินค้า
   2.02 รายการผู้จัดจำหน่าย
   2.03 รายการใบเสนอซื้อ
   2.04 รายการใบสั่งซื้อ
   2.05 รายการใบสั่งจ่าย
   2.06 รานการใบเสร็จจ่ายเงิน
   2.07 รายการใบหักภาษี ณ ที่จ่าย
   2.08 รายการใบรับสินค้า
   2.09 รายการนัดจ่าย
   2.10 รายการรอจ่าย
   2.11 รายการยอดซื้อ
   2.12 ตั้งค่า การชำระเงิน
   2.13 ตั้งค่า หน่วยนับสินค้า
   3.00 ฝ่ายคลังสินค้า
   3.01 รายการใบรับสินค้า
   3.02 รายการใบส่งสินค้า
   3.03 รายการสินค้าคงเหลือ
   3.04 รายการเบิกวัสดุอุปกรณ์
   4.00 ฝ่ายการเงิน
   4.01 รายการฝากเงิน
   4.02 รายการถอนเงิน
   4.03 รายการบัญชีธนาคาร
   4.04 รายการนัดรับเช็ค
   4.05 รายการนัดจ่ายเช็ค
   4.06 ตั้งค่าสถานะเช็ค
   5.00 ฝ่ายบุคคล
   5.01 รายการชื่อพนักงาน
   5.02 รายการลงเวลาทำงาน
   5.03 รายการวันหยุดประจำปี
   5.04 รายการเงินเดือนพนักงงาน
   5.05 รายการสลิปเงินเดือน
   5.06 รายการพนักงานใหม่
   6.00 ตั้งค่าระบบ
   6.01 ตั้งค่าข้อมูลบริษัท
   6.02 ตั้งค่าสาขาบริษัท
   6.03 ตั้งค่าหน่วยนับสินค้า
   6.04 ตั้งค่าสถานะการเบิกของ
   6.05 ตั้งค่าสถานะหน่วยนับจำนวน
   6.06 ตั้งค่าคำนำหน้าชื่อ
   6.07 ตั้งค่าตำแหน่งพนักงาน
   6.08 ตั้งค่าแผนก/ฝ่าย
   6.09 ตั้งค่าหักภาษี
   6.10 ตั้งค่าการชำระเงิน
   6.11 ตั้งค่าสถานะเช็ค
   6.12 ตั้งค่า User
   6.13 ตั้งค่า ระดับ User
   7.00 User Setting
   7.01 Login
   7.02 Logout
   7.03 Profile
   7.04 Forgot Password
   7.05 Reset Password by email
   8.00 Login
   9.00 Logout

//////////////////////////////////// 21 January 2025 //////////////////////////////////////

หน้าเว็บที่จะต้องทำงานหลักๆมีดังนี้

Welcome >>> หน้านี้ทุกคนสามารถเข้ามาดูได้โดยไม่ต้อง Login 
>>> แสดงข้อความต้อนรับ และ แสดงรายละเอียด สินค้า และ บริการ  และ รายละเอียดของบริษัท 

Home >>> หน้านี้ทุกคนสามารถเข้ามาดูได้โดยไม่ต้อง Login แสดงรายละเอียด สินค้า และ บริการ และ แสดง รายละเอียดของบริษัท 
>>> navbar มี link to Dash Board, login, logout, Register (แสดงเป็น แถบสีเข้ม) 
>>> Content แสดง ประวัติ, ติดต่อเรา(มีแผนที่ชื่อที่อยู่เบอร์โทร) facebook, email, Line QR code, website (แสดงเป็น พื้นสีขาว) 
>>> footer ลิขสิทธิ (แสดงเป็น แถบสีเข้ม)

Dash Board >>> ต้อง Login ก่อนถึงเข้ามาหน้านี้ได้ >>> หน้านี้แสดง ข้อมูลทั้งหมด เช่น ยอดขายทั้งปี แบ่งเป็นแต่ล่ะเดือน, ยอดซื้อ, ยอดจ่ายแล้ว, ยอดรอจ่าย, ยอดรอเรียกเก็บเงิน,
ยอดเรียกเก็บเงินแล้ว, ทรัพย์สินหนี้สิน, ยอดผ่อน, รายการพนักงานปัจจุบัน

    โดยแบ่งเป็น 4 ส่วน
    >>> navbar มี link to Dash Board, Hello Username or email, logout (แสดงเป็น แถบสีเข้ม)
    >>> sidebar แสดงเมนู dropdown (รายละเอียดตามด้านบน (ฟีเจอร์ของระบบ (side bar menu))) (แสดงเป็น แถบสีเข้ม สีอ่อนกว่า navbar)
    >>> Content แสดง รายละเอียดของแต่ ล่ะ content ที่ user click ที่ sidebar menu dropdown (แสดงเป็น พื้นสีขาว)
        >>ยกตัวอย่างเช่น หน้าสินค้า ก็จะมี ตารางแสดงสินค้า, มีปุ๋มเพิ่มสินค้า, ตารางสินค้า,ที่ตารางมี ปุ๋มแสดงรายละเอียด, ปุ๋มแก้ไข, ปุ๋มลบ
            >เช่น รายการสินค้า รายละเอียดก็จะมี หมายเลขสินค้า auto run number, name, detail, quantity, status, remark, แล้วก็ปุ๋มต่างๆ
    >>> footer ลิขสิทธิ (แสดงเป็น แถบสีเข้ม เท่ากับ navbar)

Login >>> ตามมาตรฐาน, ลืม Password
Logout >>> ตามมาตรฐาน
Register >>> use Email, Password, มีระบบส่ง email ไป เพื่อยืนยันตัวตน, หรือใช้ facebook เพื่อสมัครก็ได้

//////////////////////////////////// 21 January 2025 //////////////////////////////////////

ระบบการทำงาน

> > > Laravel >>> wsl >>> install all extension
> > > SQLite >>> data base UI

//////////////////////////////////// 21 January 2025 //////////////////////////////////////

จากข้อมูลในเอกสารที่คุณให้มา ต่อไปนี้คือขั้นตอนการทำงาน (Workflow) สำหรับการพัฒนาเว็บแอป ERP-CRM_1 โดยเรียงลำดับขั้นตอนแบบเช็คลิสต์:

1. การเตรียมความพร้อมและการตั้งค่าโครงการ >>> Finish >>>
   ตั้งค่าโครงการบน GitHub Desktop เพื่อใช้สำหรับการจัดการเวอร์ชันโค้ด >>> Finish >>>
   ติดตั้ง Laravel Framework บน WSL (Windows Subsystem for Linux) >>> Finish >>>
   ติดตั้งส่วนขยาย (Extensions) ที่จำเป็นสำหรับ Laravel บน WSL >>> Finish >>>
   ตั้งค่าฐานข้อมูล SQLite และเตรียม UI สำหรับจัดการฐานข้อมูล >>> Finish >>>
   Authentication >>> Finish >>>

2. การออกแบบและพัฒนาโครงสร้างพื้นฐาน
   ออกแบบโครงสร้างฐานข้อมูลสำหรับ:

ระบบฝ่ายขาย (Sale)
ระบบจัดซื้อ (Purchase)
ระบบคลังสินค้า (Inventory)
ระบบการเงิน (Finance)
ระบบฝ่ายบุคคล (HR)
การตั้งค่าระบบ (System Settings)
การตั้งค่าผู้ใช้ (User Settings)
ออกแบบ UI/UX ของแต่ละหน้า:
Home >>> Finish >>>
Dashboard >>> Finish >>>
Login >>> Finish >>>
Register >>> Finish >>>
Sidebar Menu และ Dropdown Menu

3. การพัฒนาและทดสอบฟีเจอร์หลัก
   Frontend:
   สร้างหน้า Home: >>> Finish >>>
   Navbar: ลิงก์ไปยัง Dashboard, Login, Logout, Register
   Content: แสดงข้อมูลประวัติ, สินค้าและบริการ, ติดต่อเรา
   Footer: แสดงลิขสิทธิ์
   สร้างหน้า Dashboard: >>> Finish >>>
   Navbar: แสดงลิงก์ Dashboard, ชื่อผู้ใช้/อีเมล, Logout >>> Finish >>>
   Sidebar: แสดงเมนูฟีเจอร์ต่างๆ (ตามรายละเอียดในไฟล์)
   Content: แสดงข้อมูลที่เกี่ยวข้องตามเมนูที่เลือก
   พัฒนาฟอร์ม Login และ Register: >>> Finish >>>
   ระบบยืนยันตัวตนผ่านอีเมลหรือ Facebook
   ระบบลืมรหัสผ่าน (Forgot Password) และรีเซ็ตรหัสผ่าน (Reset Password) >>> Finish >>>
   Backend:
   สร้าง API สำหรับดึงข้อมูลแต่ละโมดูล:
   ฝ่ายขาย
   จัดซื้อ
   คลังสินค้า
   การเงิน
   บุคคล
   ตั้งค่าระบบ
   ตั้งค่าผู้ใช้
   เชื่อมต่อฐานข้อมูล SQLite กับ Laravel >>> Finish >>>

4. การทดสอบและปรับปรุง
   ทดสอบการทำงานของระบบ (Unit Tests และ Integration Tests)
   ทดสอบการทำงานแบบออฟไลน์ของฐานข้อมูล SQLite
   ทดสอบ UI/UX กับผู้ใช้งานตัวอย่าง
   แก้ไขปัญหาที่พบ (Debugging) และปรับปรุงฟังก์ชันตามผลการทดสอบ

5. การติดตั้งและการเผยแพร่
   ตรวจสอบการทำงานของระบบอีกครั้งก่อนการเผยแพร่
   ตั้งค่าโฮสต์สำหรับการใช้งานจริง (เช่น VPS หรือบริการคลาวด์)
   สำรองข้อมูลและเอกสารประกอบ
   เผยแพร่เว็บไซต์ให้ผู้ใช้งาน

6. การบำรุงรักษา
   ตรวจสอบและแก้ไขข้อผิดพลาดที่ผู้ใช้งานรายงาน
   อัปเดตระบบตามความต้องการเพิ่มเติมในอนาคต


////////////////////////////////////////////////////////////////////////////


ขั้นตอนการทำงาน


//////////////////////////////  ระบบพื้นฐาน  ////////////////////////////////   
### **สรุปขั้นตอนการติดตั้งและตั้งค่าระบบ Laravel**

>>> เปิด Terminal
>>> cd เข้าไปใน folder ที่จะทำงาน

ตรวจสอบการติดตั้ง:
    >>> php -v
            PHP 8.3.16 (cli) (built: Jan 19 2025 13:45:13) (NTS)
            Copyright (c) The PHP Group
            Zend Engine v4.3.16, Copyright (c) Zend Technologies
            with Zend OPcache v8.3.16, Copyright (c), by Zend Technologies

    >>> composer --version 
            Composer version 2.8.4 2024-12-11 11:57:47
            PHP version 8.3.16 (/usr/bin/php8.3)
            Run the "diagnose" command to get more detailed diagnostics output.

    ตรวจสอบ Extensions ของ PHP
    >>> php -m

        ตรวจสอบว่ามี Extensions ต่อไปนี้หรือไม่:
            BCMath >>>ok installed
            Ctype >>>ok installed
            Fileinfo >>>ok installed
            JSON >>>ok installed
            Mbstring >>>ok installed
            OpenSSL >>>ok installed
            PDO >>>ok installed
            Tokenizer >>>ok installed
            XML >>>ok installed

        หากขาด ให้ติดตั้งผ่านคำสั่ง:

        >>> sudo apt install php-<extension_name> -y  >>>ok installed


#### **1. การติดตั้ง Linux และ PHP**
**ขั้นตอน:**
1. **ติดตั้ง WSL (Windows Subsystem for Linux):**
   - รันคำสั่งใน PowerShell (Run as Administrator):
     ```bash

    >>> wsl --install >>>ok installed

     ```
   - รีสตาร์ทเครื่องและเปิด Ubuntu เพื่อตั้งค่า.

2. **อัปเดตระบบและติดตั้ง PHP:**
   ```bash

    >>>wsl เพื่อเข้าไประบบ Linux

    ตรวจสอบว่า SQLite Driver ติดตั้งใน PHP หรือยัง
    ถ้าไม่มีผลลัพธ์ หรือไม่มี sqlite3 ในรายการ แปลว่า SQLite Driver ยังไม่ได้ติดตั้ง

    >>> php -m | grep sqlite

    ติดตั้ง SQLite Driver สำหรับ PHP

    >>> sudo apt update
    >>> sudo apt install php-sqlite3

    >>> sudo apt update && sudo apt upgrade -y >>>ok installed
    >>> sudo apt install php8.1 php8.1-cli php8.1-bcmath php8.1-mbstring php8.1-xml php8.1-curl php8.1-mysql php8.1-sqlite3 php8.1-zip -y >>>ok installed
   
   เมื่อติดตั้งเสร้จลองเช็คดูอีกที

   >>> php -m | grep sqlite

   ถ้าแสดงตามนี้คือโอเคร
    pdo_sqlite
    sqlite3

    รีสตาร์ทเซิร์ฟเวอร์ PHP (ถ้าจำเป็น)

    >>> sudo service apache2 restart
    >>> sudo service php8.3-fpm restart

    ใช้คำสั่งนี้เพื่อตรวจสอบเหตุผลที่ php8.3-fpm ไม่สามารถรีสตาร์ทได้:

    >>> sudo service php8.3-fpm status

    รันคำสั่งเพื่อตรวจสอบ log และค้นหาสาเหตุของปัญหา:

    >>> sudo journalctl -u php8.3-fpm

    หากยังไม่มีข้อมูล ลองเริ่มบริการ php8.3-fpm ด้วยคำสั่ง:
    >>> sudo service php8.3-fpm start

    ตรวจสอบ อีกครั้ง
    >>> sudo service php8.3-fpm status

    รันคำสั่งนี้เพื่อติดตั้ง net-tools:
    >>> sudo apt update
    >>> sudo apt install net-tools

    วิธีตรวจสอบพอร์ตของ php-fpm
    >>> sudo netstat -tulnp | grep php

   ```

3. **ติดตั้ง Composer:**
   - ดาวน์โหลด Composer:
     ```bash

    >>>ok installed

     curl -sS https://getcomposer.org/installer | php 
     sudo mv composer.phar /usr/local/bin/composer
     composer --version

     ```

---

#### **2. การสร้างโปรเจกต์ Laravel**
**ขั้นตอน:**
1. **สร้างโปรเจกต์ใหม่:**
   ```bash

   >>> composer create-project laravel/laravel ceosofts >>>ok installed

   >>> cd ceosofts

   ```

2. **ตั้งค่า APP_KEY:**
คำสั่ง php artisan key เป็นคำสั่งใน Laravel Framework ที่ใช้จัดการกับ Application Key หรือ APP_KEY 
ซึ่งเป็นคีย์สำคัญที่ Laravel ใช้สำหรับการเข้ารหัส (encryption) ข้อมูลต่าง ๆ เช่น session, cookies, 
และข้อมูลที่ต้องการความปลอดภัยสูง
   ```bash

   >>> php artisan key:generate >>>ok installed

   ```

//////////////////////////////  ระบบพื้นฐาน  ////////////////////////////////   
//////////////////////////////  การสร้างฐานข้อมูล  ////////////////////////////////
3. การตั้งค่าฐานข้อมูล
  3.1 แก้ไขไฟล์ .env
    เปิดไฟล์ .env และกำหนดค่าฐานข้อมูล เช่น:
    

    หากใช้ SQLite:
    env
    Copy
    Edit

    DB_CONNECTION=sqlite
    DB_DATABASE=[/mnt/c/Users/facad/Desktop/Developer/ERP-CRM_1/ceosofts/database/database.sqlite]
    DB_FOREIGN_KEYS=true

  3.2 สร้างฐานข้อมูล สำหรับ SQLite:

    ที่ Terminal >>> wsl >>>
    ใช้คำสั่ง touch เพื่อสร้างไฟล์ database.sqlite ในโฟลเดอร์ database:
    
    >>> touch database/database.sqlite

    ตรวจสอบว่าฐานข้อมูลถูกสร้างหรือไม่

    >>> ls database/

    ให้สิทธิ์การอ่านและเขียนสำหรับไฟล์ฐานข้อมูล:

    >>> chmod 777 database/database.sqlite

    หลังจากกำหนดค่าทุกอย่างเรียบร้อยแล้ว ให้รันคำสั่งต่อไปนี้เพื่อสร้างตาราง:

    >>> php artisan migrate


    เมื่อเปิดฐานข้อมูลสำเร็จ คุณสามารถพิมพ์คำสั่งต่อไปนี้เพื่อตรวจสอบตารางในฐานข้อมูล:
    
    หลังจากเข้าสู่ SQLite (โดยใช้คำสั่ง 

    >>> sqlite3 database/database.sqlite 

    .tables

        ceosoftslaptop@CeosoftsLapTop:/mnt/c/Users/facad/Desktop/Developer/ERP-CRM_1/ceosofts$ sqlite3 database/database.sqlite 
        SQLite version 3.31.1 2020-01-27 19:55:54
        Enter ".help" for usage hints.
        sqlite> .tables
        cache                  job_batches            password_reset_tokens
        cache_locks            jobs                   sessions
        failed_jobs            migrations             users
        sqlite>

    at teminal wsl 
    เพิ่มข้อมูลตัวอย่าง (Seeder): หากคุณต้องการเพิ่มข้อมูลตัวอย่างในฐานข้อมูล:
    >>> php artisan db:seed

    ใช้งานฐานข้อมูลผ่าน Tinker: ใช้ Laravel Tinker เพื่อทดสอบการดึงข้อมูลจากตาราง: at Terminal

    >>> php artisan tinker
    >>> \App\Models\User::all();

    ceosoftslaptop@CeosoftsLapTop:/mnt/c/Users/facad/Desktop/Developer/ERP-CRM_1/ceosofts$ php artisan tinker
 \App\Models\User::all();

Psy Shell v0.12.7 (PHP 8.3.16 — cli) by Justin Hileman

> \App\Models\User::all();
= Illuminate\Database\Eloquent\Collection {#5950
    all: [
      App\Models\User {#5541
        id: 1,
        name: "Test User",
        email: "test@example.com",
        email_verified_at: "2025-01-21 12:48:37",
        #password: "$2y$12$IJjBlnqtnprZV2oeNBnwO.N0.ZDsCtL.uLil48frcmOtyFLDfSsFq",
        #remember_token: "lnkgaakHLt",
        created_at: "2025-01-21 12:48:38",
        updated_at: "2025-01-21 12:48:38",
      },
    ],
  }

(END)

         ทดลองระบบ register
         email test1@example.com
         password 12345678


ตรวจสอบการตั้งค่าใน .env

DB_CONNECTION=sqlite
DB_DATABASE=/mnt/c/Users/facad/Desktop/Developer/ERP-CRM_1/ceosofts/database/database.sqlite

คุณสามารถหาตำแหน่งไฟล์ที่ถูกต้องได้ด้วยคำสั่ง: Terminal >>> wsl 
>>> realpath database/database.sqlite

หลังจากแก้ไข .env แล้ว ให้รีเฟรชการตั้งค่าของ Laravel:
>>> php artisan config:clear
>>> php artisan cache:clear


ตรวจสอบการเชื่อมต่อฐานข้อมูล at Terminal
>>> php artisan tinker
>>> DB::table('users')->get();

สร้างข้อมูลตัวอย่าง (Seeder)
>>> php artisan make:seeder UsersTableSeeder

//////////////////////////////  การสร้างฐานข้อมูล  ////////////////////////////////
//////////////////////////////  Authentication  ////////////////////////////////

ตรวจสอบระบบการสมัครสมาชิกและการเข้าสู่ระบบ
ติดตั้งแพ็กเกจ Breeze:

>>> composer require laravel/breeze --dev

ติดตั้งระบบ Authentication:

>>> php artisan breeze:install

ติดตั้ง dependencies ของ Frontend:

>>> npm install && npm run dev

รัน migrations เพื่อสร้างตารางสำหรับระบบ Authentication

>>> php artisan migrate

ติดตั้ง Laravel UI (ทางเลือก)  หากคุณต้องการใช้ระบบ Authentication แบบดั้งเดิม (เช่น Bootstrap):

>>> composer require laravel/ui

ติดตั้ง scaffolding สำหรับ Authentication:

>>> php artisan ui bootstrap --auth 

ติดตั้ง dependencies ของ Frontend

>>> npm install && npm run dev

รัน migrations

>>> php artisan migrate

เรียกใช้เซิร์ฟเวอร์

>>> php artisan serve

test ไปที่:
หน้า เข้าสู่ระบบ: http://127.0.0.1:8000/login
หน้า สมัครสมาชิก: http://127.0.0.1:8000/register


เพิ่มการจัดการบทบาทและสิทธิ์ (Roles & Permissions)

>>> composer require spatie/laravel-permission

***note 
1.ตอนนี้สามารถเข้า http://127.0.0.1:8000/ โดยยังเป็นของ Laravel อยู่
2.สามารถเข้า http://127.0.0.1:8000/login >>> http://127.0.0.1:8000/home
2.สามารถเข้า http://127.0.0.1:8000/register  >>> http://127.0.0.1:8000/home
3.สามารถ logout ได้ 
4.ยังไม่มีหน้า http://127.0.0.1:8000/dashboard
5.ระบบ ลืม password ใช้ได้



         ทดลองระบบ register
         email test1@example.com
         password 12345678

////////////////////////////// Authentication  ////////////////////////////////


//////////////////////////////  ออกแบบโครงสร้างฐานข้อมูล  ////////////////////////


การดำเนินงานแบบละเอียด ทุกขั้นตอนที่จำเป็นในการพัฒนาระบบพื้นฐานของ ERP-CRM:

1. ออกแบบโครงสร้างฐานข้อมูล
1.1 ระบบฝ่ายขาย (Sales)
สร้างฐานข้อมูลเพื่อจัดเก็บข้อมูลการขาย:

ตารางที่เกี่ยวข้อง:
Customers: เก็บข้อมูลลูกค้า
Products: เก็บข้อมูลสินค้า
Orders: เก็บข้อมูลคำสั่งซื้อ
Order Items: เก็บรายการสินค้าในคำสั่งซื้อ
ขั้นตอนการสร้างฐานข้อมูล

/////////////////////////////  สร้าง Migration  /////////////////////////////////

สร้าง Model และ Migration ใช้คำสั่งเพื่อสร้าง Model พร้อมกับ Migration: หรือ สร้างไฟล์ ช่องในตาราง ฐานข้อมูล

>>>
php artisan make:model Customer -m
php artisan make:model Product -m
php artisan make:model Order -m
php artisan make:model OrderItem -m
>>>

/////////////////////////////  สร้าง Migration  /////////////////////////////////
/////////////////////////////  แก้ไข Migration  /////////////////////////////////

แก้ไขไฟล์ Migration: เปิดไฟล์ในโฟลเดอร์ database/migrations เช่น xxxx_xx_xx_xxxxxx_create_customers_table.php และเพิ่มโครงสร้าง:

หรือ สร้าง ช่องในตาราง ฐานข้อมูล

        ////////////////////โค้ดเดิม////////////////////////

        <?php

            use Illuminate\Database\Migrations\Migration;
            use Illuminate\Database\Schema\Blueprint;
            use Illuminate\Support\Facades\Schema;

            return new class extends Migration
            {
                /**
                * Run the migrations.
                */
                public function up(): void
                {
                    Schema::create('customers', function (Blueprint $table) {
                        $table->id();
                        $table->timestamps();
                    });
                }

                /**
                * Reverse the migrations.
                */
                public function down(): void
                {
                    Schema::dropIfExists('customers');
                }
            };

        //////////////////โค้ดใหม่/////////////////////////

        <?php

            use Illuminate\Database\Migrations\Migration;
            use Illuminate\Database\Schema\Blueprint;
            use Illuminate\Support\Facades\Schema;

            return new class extends Migration
            {
                /**
                * Run the migrations.
                */
                public function up(): void
                {
                    Schema::create('customers', function (Blueprint $table) {
                        $table->id();


                        $table->string('name'); // ชื่อลูกค้า >>>เพิ่มจากของเดิม
                        $table->string('email')->unique(); // อีเมล ต้องไม่ซ้ำ >>>เพิ่มจากของเดิม
                        $table->string('phone')->nullable(); // เบอร์โทรศัพท์ (ไม่จำเป็นต้องมี) >>>เพิ่มจากของเดิม
                        $table->string('address')->nullable(); // ที่อยู่ (ไม่จำเป็นต้องมี) >>>เพิ่มจากของเดิม
                        $table->string('taxid')->nullable(); //  taxid (ไม่จำเป็นต้องมี) >>>เพิ่มจากของเดิม


                        $table->timestamps();
                    });
                }

                /**
                * Reverse the migrations.
                */
                public function down(): void
                {
                    Schema::dropIfExists('customers');
                }
            };



        Schema::create('customers', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique();
            $table->string('phone')->nullable();
            $table->timestamps();
        });


ตัวอย่างโครงสร้างของ Orders:

php
Copy
Edit
Schema::create('orders', function (Blueprint $table) {
    $table->id();
    $table->foreignId('customer_id')->constrained()->onDelete('cascade');
    $table->date('order_date');
    $table->decimal('total_amount', 10, 2);
    $table->timestamps();
});


ตัวอย่างโครงสร้างของ Order Items:

php
Copy
Edit
Schema::create('order_items', function (Blueprint $table) {
    $table->id();

    $table->foreignId('order_id')->constrained()->onDelete('cascade');
    $table->foreignId('product_id')->constrained()->onDelete('cascade');
    $table->integer('quantity');
    $table->decimal('unit_price', 10, 2);
    
    $table->timestamps();
});


รัน Migration: เมื่อแก้ไขทุกไฟล์แล้ว ให้รันคำสั่ง:

>>> php artisan migrate

/////////////////////////////  แก้ไข Migration  /////////////////////////////////
/////////////////////////////  ทดลองใส่ข้อมูล  /////////////////////////////////

เพิ่ม Seeder (ข้อมูลตัวอย่าง): ใช้คำสั่ง:

>>> php artisan make:seeder CustomersTableSeeder
>>> php artisan make:seeder ProductsTableSeeder
>>> php artisan make:seeder OrdersTableSeeder
>>> php artisan make:seeder OrderItemsTableSeeder

หมายเหตุ ต้องพิมพ์ให้เหมือนกัน จากโค้ดใน file นั้นๆ >>> จุดนี้ >>> Schema::create('order_items', >>>


เพิ่มข้อมูลในไฟล์ Seeder: ข้อมูลตัวอย่างเพื่อลองแสดง
ไปที่ไฟล์ที่สร้างในโฟลเดอร์ database/seeders และเพิ่มข้อมูลตัวอย่างในแต่ละไฟล์ เช่น:
CustomersTableSeeder.php


//>>>เพิ่มจากของเดิม
\App\Models\Customer::create([
    'name' => 'John Doe',
    'email' => 'john@example.com',
    'phone' => '123456789',
]);
//>>>เพิ่มจากของเดิม

หมายเหตุ ชื่อช่อง ข้อมูลต้องตรงกันกับ file in migrations

รันคำสั่ง Seed:

>>> php artisan db:seed --class=CustomersTableSeeder
>>> php artisan db:seed --class=ProductsTableSeeder
>>> php artisan db:seed --class=OrdersTableSeeder
>>> php artisan db:seed --class=OrderItemsTableSeeder

หรือ หลังจากแก้ไขไฟล์ Seeder เสร็จสิ้น ให้รันคำสั่งเพื่อ Seed ข้อมูลทั้งหมด: แต่ก็ไม่ควรทำดีกว่า

>>> php artisan db:seed

/////////////////////////////  ทดลองใส่ข้อมูล  /////////////////////////////////
*******************************************************************************

หลังจากที่คุณสร้าง Seeder และเพิ่มข้อมูลตัวอย่างลงในฐานข้อมูลแล้ว 
ขั้นตอนถัดไปขึ้นอยู่กับเป้าหมายของโครงการ ERP-CRM ต่อไปนี้เป็นแนวทางที่สามารถทำได้:

1. ทดสอบข้อมูลในฐานข้อมูล
ตรวจสอบว่าข้อมูลในฐานข้อมูลถูกเพิ่มเรียบร้อยหรือไม่:

ใช้ Tinker:

>>> php artisan tinker

ตัวอย่างการตรวจสอบข้อมูล:

>>> \App\Models\Customer::all(); >>>ok // ดูข้อมูลลูกค้าทั้งหมด
>>> \App\Models\Product::all(); >>>ok // ดูข้อมูลสินค้าทั้งหมด
>>> \App\Models\Order::all(); >>>ok // ดูข้อมูลสินค้าทั้งหมด
>>> \App\Models\OrderItem::all(); >>>ok // สังเกตุว่าชื่อ ต้องตรงกันกับ ไฟล์ app/Models/OrderItem.php

>>> \App\Models\Order::with('orderItems')->get(); // ดูคำสั่งซื้อพร้อมรายการสินค้า


ตรวจสอบผ่าน SQLite CLI (ถ้าคุณใช้ SQLite):

>>> sqlite3 database/database.sqlite
>>> SELECT * FROM customers; >>>ok
>>> SELECT * FROM products; >>>ok
>>> SELECT * FROM orders; >>>ok
>>> SELECT * FROM order_items; >>>ok
หรือ
.tables


2. พัฒนา Controller และ Routes
ตอนนี้คุณมีฐานข้อมูลพร้อมแล้ว คุณสามารถสร้าง Controller เพื่อจัดการข้อมูลจากแต่ละตาราง:

สร้าง Controller สำหรับแต่ละโมดูล:
โดยตั้งชื่อ file ให้เข้าไปดูใน C:\Users\facad\Desktop\Developer\ERP-CRM_1\ceosofts\database\seeders

>>> php artisan make:controller CustomerController --resource
>>> php artisan make:controller ProductController --resource
>>> php artisan make:controller OrderController --resource
>>> php artisan make:controller OrderItemController --resource


เพิ่ม Routes ใน routes/web.php: ตัวอย่าง:

>>> 
use App\Http\Controllers\CustomerController;
use App\Http\Controllers\ProductController;
use App\Http\Controllers\OrderController;
use App\Http\Controllers\OrderItemController;
>>> 

>>> 
Route::resource('customers', CustomerController::class);
Route::resource('products', ProductController::class);
Route::resource('orders', OrderController::class);
Route::resource('orders', OrderItemController::class);
>>> 

พัฒนา Methods ใน Controller: ตัวอย่างใน CustomerController.php:

>>> 
public function index()
{
    $customers = \App\Models\Customer::all(); //>>> เพิ่มใหม่
    return view('customers.index', compact('customers')); //>>> เพิ่มใหม่
}

public function show($id)
{
    $customer = \App\Models\Customer::findOrFail($id); //>>> เพิ่มใหม่
    return view('customers.show', compact('customer')); //>>> เพิ่มใหม่
}
>>> 


ทดสอบเข้าหน้า
http://localhost:8000/ >>> ok
http://localhost:8000/register >>> ok
http://localhost:8000/login  >>> ok
http://localhost:8000/dashboard >>> ยังไม่ได้
http://localhost:8000/products >>> ยังไม่ได้ เป็นหน้าเปล่าๆ

///////////////////////////////////////////////  ทำถึงตรงนี้ 22 Jan 2025 /////////////////////////////////

พัฒนา Methods ใน Controller: ตัวอย่างใน CustomerController.php:

การทำงานของแต่ละฟังก์ชัน:
index

ดึงข้อมูลลูกค้าทั้งหมดจากฐานข้อมูล (Customer::all()) และส่งข้อมูลไปยัง View customers.index
View ควรจะแสดงรายการลูกค้าทั้งหมดในรูปแบบตารางหรือรายการ
create

แสดงฟอร์มสำหรับเพิ่มลูกค้าใหม่ (customers.create)
View นี้ควรมีฟอร์มที่ส่งข้อมูลไปยังฟังก์ชัน store
store

รับข้อมูลจากฟอร์ม create ผ่าน $request และบันทึกข้อมูลใหม่ลงในฐานข้อมูล (Customer::create($request->all()))
หลังจากบันทึกเสร็จ ระบบจะ redirect กลับไปยังหน้ารายการลูกค้า (customers.index)
show

แสดงข้อมูลรายละเอียดของลูกค้าตาม id ที่ส่งมา (Customer::findOrFail($id))
View customers.show ควรจะแสดงรายละเอียดของลูกค้าคนเดียว
edit

แสดงฟอร์มแก้ไขข้อมูลลูกค้า (customers.edit) พร้อมข้อมูลปัจจุบัน
View นี้ควรมีฟอร์มที่ส่งข้อมูลไปยังฟังก์ชัน update
update

รับข้อมูลจากฟอร์มแก้ไข (edit) ผ่าน $request และอัปเดตข้อมูลในฐานข้อมูล
หลังจากอัปเดตเสร็จ ระบบจะ redirect กลับไปยังหน้ารายการลูกค้า (customers.index)
destroy

ลบข้อมูลลูกค้าตาม id ที่ส่งมา (Customer::findOrFail($id) และ $customer->delete())
หลังจากลบเสร็จ ระบบจะ redirect กลับไปยังหน้ารายการลูกค้า (customers.index)


///////////////////////////////////////////////  อธิบายโค้ด  /////////////////////////////////

พัฒนา Methods ใน Controller: ตัวอย่างใน CustomerController.php:

ข้อแนะนำเพิ่มเติม:
การตรวจสอบ Validation
ควรเพิ่มการตรวจสอบ Validation ในฟังก์ชัน store และ update เพื่อป้องกันข้อมูลที่ไม่ถูกต้อง เช่น:

public function store(Request $request)
{
    $validated = $request->validate([
        'name' => 'required|string|max:255',
        'email' => 'required|email|unique:customers',
        'phone' => 'nullable|string|max:15',
        'address' => 'nullable|string',
    ]);

    \App\Models\Customer::create($validated);
    return redirect()->route('customers.index');
}


การใช้ Mass Assignment
ใน Model Customer ควรระบุ fillable fields เพื่อป้องกันการโจมตีแบบ Mass Assignment:

protected $fillable = ['name', 'email', 'phone', 'address'];

ตรวจสอบ Route Resource
ตรวจสอบว่าได้เพิ่ม Route Resource ใน routes/web.php:

Route::resource('customers', CustomerController::class);

//////////////////////  พัฒนา Methods ใน Controller: ตัวอย่างใน CustomerController.php:  //////////////
////////////////////////////////////////////  เริ่มทำ 24 Jan 2025  /////////////////////////////////

การสร้าง View
ตรวจสอบว่าได้สร้าง View ในโฟลเดอร์ resources/views/customers/ เช่น:

index.blade.php
create.blade.php
edit.blade.php
show.blade.php

การจัดการ Flash Message
คุณสามารถเพิ่ม Flash Message เพื่อแจ้งเตือนผู้ใช้เมื่อมีการเพิ่ม/แก้ไข/ลบข้อมูล:

return redirect()->route('customers.index')->with('success', 'Customer created successfully.');


/////////////////////////////////////// สร้าง view of customer ////////////////////////////////////

3. พัฒนา Views
สร้าง Blade Template สำหรับแสดงผลข้อมูล:

สร้างโฟลเดอร์ resources/views/customers:

>>> mkdir resources/views/customers

สร้างไฟล์ index.blade.php สำหรับแสดงรายชื่อลูกค้า:

จากการสนทนาวันนี้ เราได้ดำเนินการเพิ่มระบบสำหรับจัดการ Customer ใน Laravel ซึ่งประกอบไปด้วยการตั้งค่า Model, Controller, Views, และการจัดการเส้นทาง (Routes) พร้อมฟังก์ชันต่าง ๆ อย่างละเอียด สำหรับการสร้างและใช้งานระบบ Customer ดังนี้:

สรุปขั้นตอนการพัฒนา Customer Management
1. สร้าง Model และ Migration
ใช้คำสั่ง:
bash
คัดลอก
แก้ไข
php artisan make:model Customer -m
แก้ไขไฟล์ Migration ใน database/migrations:
php
คัดลอก
แก้ไข
public function up(): void
{
    Schema::create('customers', function (Blueprint $table) {
        $table->id();
        $table->string('name');
        $table->string('email')->unique();
        $table->string('phone')->nullable();
        $table->text('address')->nullable();
        $table->string('taxid')->nullable();
        $table->timestamps();
    });
}
รัน Migration:
bash
คัดลอก
แก้ไข
php artisan migrate
2. สร้าง Controller
ใช้คำสั่ง:
bash
คัดลอก
แก้ไข
php artisan make:controller CustomerController --resource
เพิ่มฟังก์ชันการจัดการข้อมูลใน CustomerController (โค้ดใน Canvas ที่คุณให้มานั้นสมบูรณ์แล้ว)
3. กำหนดเส้นทางใน Route
แก้ไขไฟล์ routes/web.php:
php
คัดลอก
แก้ไข
use App\Http\Controllers\CustomerController;

Route::resource('customers', CustomerController::class);
4. สร้าง Views
สร้างไฟล์ View ที่เกี่ยวข้องทั้งหมด:

index.blade.php (แสดงรายการลูกค้า):

blade
คัดลอก
แก้ไข
@extends('layouts.app')

@section('title', 'Customers')

@section('content')
<div class="container">
    <h1>Customer List</h1>
    <a href="{{ route('customers.create') }}" class="btn btn-primary mb-3">Add Customer</a>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Email</th>
                <th>Phone</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach ($customers as $customer)
                <tr>
                    <td>{{ $customer->id }}</td>
                    <td>{{ $customer->name }}</td>
                    <td>{{ $customer->email }}</td>
                    <td>{{ $customer->phone }}</td>
                    <td>
                        <a href="{{ route('customers.show', $customer->id) }}" class="btn btn-info">View</a>
                        <a href="{{ route('customers.edit', $customer->id) }}" class="btn btn-warning">Edit</a>
                        <form action="{{ route('customers.destroy', $customer->id) }}" method="POST" style="display:inline;">
                            @csrf
                            @method('DELETE')
                            <button type="submit" class="btn btn-danger">Delete</button>
                        </form>
                    </td>
                </tr>
            @endforeach
        </tbody>
    </table>
    {{ $customers->links() }}
</div>
@endsection
create.blade.php (เพิ่มลูกค้าใหม่):

blade
คัดลอก
แก้ไข
@extends('layouts.app')

@section('title', 'Add Customer')

@section('content')
<div class="container">
    <h1>Add Customer</h1>
    <form action="{{ route('customers.store') }}" method="POST">
        @csrf
        <div class="mb-3">
            <label for="name" class="form-label">Name</label>
            <input type="text" name="name" id="name" class="form-control" required>
        </div>
        <div class="mb-3">
            <label for="email" class="form-label">Email</label>
            <input type="email" name="email" id="email" class="form-control" required>
        </div>
        <div class="mb-3">
            <label for="phone" class="form-label">Phone</label>
            <input type="text" name="phone" id="phone" class="form-control">
        </div>
        <div class="mb-3">
            <label for="address" class="form-label">Address</label>
            <textarea name="address" id="address" class="form-control"></textarea>
        </div>
        <div class="mb-3">
            <label for="taxid" class="form-label">Tax ID</label>
            <input type="text" name="taxid" id="taxid" class="form-control">
        </div>
        <button type="submit" class="btn btn-success">Save</button>
    </form>
</div>
@endsection
show.blade.php (แสดงรายละเอียดลูกค้า):

blade
คัดลอก
แก้ไข
@extends('layouts.app')

@section('title', 'Customer Details')

@section('content')
<div class="container">
    <h1>Customer Details</h1>
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">{{ $customer->name }}</h5>
            <p><strong>Email:</strong> {{ $customer->email }}</p>
            <p><strong>Phone:</strong> {{ $customer->phone }}</p>
            <p><strong>Address:</strong> {{ $customer->address }}</p>
            <p><strong>Tax ID:</strong> {{ $customer->taxid }}</p>
            <p><strong>Created At:</strong> {{ $customer->created_at }}</p>
            <p><strong>Updated At:</strong> {{ $customer->updated_at }}</p>
            <a href="{{ route('customers.index') }}" class="btn btn-primary">Back to Customers</a>
        </div>
    </div>
</div>
@endsection
edit.blade.php (แก้ไขลูกค้า):

blade
คัดลอก
แก้ไข
@extends('layouts.app')

@section('title', 'Edit Customer')

@section('content')
<div class="container">
    <h1>Edit Customer</h1>
    <form action="{{ route('customers.update', $customer->id) }}" method="POST">
        @csrf
        @method('PUT')
        <div class="mb-3">
            <label for="name" class="form-label">Name</label>
            <input type="text" name="name" id="name" class="form-control" value="{{ $customer->name }}" required>
        </div>
        <div class="mb-3">
            <label for="email" class="form-label">Email</label>
            <input type="email" name="email" id="email" class="form-control" value="{{ $customer->email }}" required>
        </div>
        <div class="mb-3">
            <label for="phone" class="form-label">Phone</label>
            <input type="text" name="phone" id="phone" class="form-control" value="{{ $customer->phone }}">
        </div>
        <div class="mb-3">
            <label for="address" class="form-label">Address</label>
            <textarea name="address" id="address" class="form-control">{{ $customer->address }}</textarea>
        </div>
        <div class="mb-3">
            <label for="taxid" class="form-label">Tax ID</label>
            <input type="text" name="taxid" id="taxid" class="form-control" value="{{ $customer->taxid }}">
        </div>
        <button type="submit" class="btn btn-success">Update</button>
    </form>
</div>
@endsection
5. ทดสอบ
เปิด http://127.0.0.1:8000/customers
ตรวจสอบการเพิ่ม แก้ไข ลบ และดูข้อมูลลูกค้า
หากมีคำถามเพิ่มเติม แจ้งได้เลยครับ! 😊


http://127.0.0.1:8000/ >>> it is work
http://127.0.0.1:8000/login >>> it is work
http://127.0.0.1:8000/logout >>> it is work
http://127.0.0.1:8000/dashboard >>> it is work
http://127.0.0.1:8000/customers >>> it is work
ระบบ ถ้าไม่ login จะเข้า dashboard ไม่ได้  >>> it is work 

/////////////////////////////////////// สร้าง view of customer ////////////////////////////////////

/////////////////////////////////////// การเพิ่มหน้า Home ////////////////////////////////////


นี่คือ สรุปขั้นตอนการเพิ่มหน้า Home อย่างละเอียด:

1. การเพิ่ม Route สำหรับหน้า Home
เปิดไฟล์ routes/web.php

เพิ่ม Route สำหรับหน้า Home:

php
คัดลอก
แก้ไข
Route::get('/home', function () {
    return redirect()->route('dashboard'); // เปลี่ยนเส้นทางไปที่ Dashboard หลังจากเข้าสู่ระบบ
})->middleware('auth')->name('home');
รายละเอียด:
ใช้ Middleware auth เพื่อจำกัดสิทธิ์ให้เฉพาะผู้ที่ล็อกอินแล้ว
เปลี่ยนเส้นทาง (redirect()) ไปที่ Dashboard (/dashboard)
2. เพิ่มลิงก์ Home ใน Navbar
เปิดไฟล์ Layout หลัก (resources/views/layouts/app.blade.php)

เพิ่มลิงก์หน้า Home ใน <ul class="navbar-nav me-auto">:

php
คัดลอก
แก้ไข
<ul class="navbar-nav me-auto">
    <li class="nav-item">
        <a class="nav-link" href="{{ route('home') }}">{{ __('Home') }}</a>
    </li>
    @auth
        <li class="nav-item">
            <a class="nav-link" href="{{ route('dashboard') }}">{{ __('Dashboard') }}</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="{{ route('customers.index') }}">{{ __('Customers') }}</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="{{ route('products.index') }}">{{ __('Products') }}</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="{{ route('orders.index') }}">{{ __('Orders') }}</a>
        </li>
    @endauth
</ul>
รายละเอียด:
ลิงก์ Home จะพาผู้ใช้ไปที่ /home ซึ่งจะเปลี่ยนเส้นทางไปที่ /dashboard
ลิงก์อื่น ๆ เช่น Dashboard, Customers ยังคงใช้งานได้ปกติ
3. ตั้งค่าการเปลี่ยนเส้นทางหลัง Login
เปิดไฟล์ app/Providers/RouteServiceProvider.php

ตั้งค่าตัวแปร HOME:

php
คัดลอก
แก้ไข
public const HOME = '/dashboard';
รายละเอียด:
กำหนดให้ Laravel เปลี่ยนเส้นทางผู้ใช้ไปที่ /dashboard ทันทีหลังจาก Login
4. สร้าง View สำหรับหน้า Home (ถ้าต้องการหน้าเฉพาะ)
สร้างไฟล์ resources/views/home.blade.php

เพิ่มเนื้อหาของหน้า Home:

php
คัดลอก
แก้ไข
@extends('layouts.app')

@section('title', 'Home')

@section('content')
<div class="container">
    <h1>Welcome to Home Page</h1>
    <p>This is the Home page for logged-in users.</p>
</div>
@endsection
กรณีใช้งาน:
ใช้สำหรับหน้า Home ที่มีเนื้อหาเฉพาะ (แต่ในกรณีของคุณ Home จะเปลี่ยนเส้นทางไปที่ Dashboard แทน)
5. ทดสอบการทำงาน
รันคำสั่ง:
bash
คัดลอก
แก้ไข
php artisan serve
เปิดเบราว์เซอร์:
ไปที่ /login → ล็อกอิน → ระบบจะพาไปที่ /dashboard
พยายามเข้าถึง /home → ระบบจะเปลี่ยนเส้นทางไปที่ /dashboard
6. สรุปการทำงาน
Route:
หน้า Home (/home) เปลี่ยนเส้นทางไปยัง Dashboard (/dashboard)
จำกัดสิทธิ์ด้วย Middleware auth
Navbar:
เพิ่มลิงก์ Home ที่สามารถเข้าถึงได้ตลอด
Redirect หลัง Login:
กำหนดให้ผู้ใช้เปลี่ยนเส้นทางไปที่ Dashboard หลังจาก Login สำเร็จ
ผลลัพธ์ที่ได้:
หน้า Home ทำงานได้ตามที่ต้องการ โดยเปลี่ยนเส้นทางไปที่หน้า Dashboard สำหรับผู้ที่ล็อกอินแล้ว

/////////////////////////////////////// การเพิ่มหน้า Home ////////////////////////////////////

/////////////////////////////////////// upgrad welcome page ////////////////////////////////////

สรุปการอัปเกรดหน้า Welcome
1. เพิ่มข้อความต้อนรับ
หัวข้อ (Header):
แสดงข้อความต้อนรับ (Welcome) พร้อมคำบรรยายเกี่ยวกับบริษัท เช่น "Your one-stop solution for ERP and CRM systems."
ใช้ CSS เพิ่มความน่าสนใจ เช่น สีพื้นหลังแดง (#ff2d20) และข้อความสีขาว.
2. เพิ่มลิงก์ Navigation
การเพิ่มลิงก์:

ลิงก์ไปยังหน้า Home, Log in, และ Register.

ใช้ Blade เพื่อแสดงลิงก์ตามสถานะผู้ใช้:

ผู้ใช้ล็อกอินแล้ว: แสดงลิงก์ Home.
ผู้ใช้ยังไม่ได้ล็อกอิน: แสดงลิงก์ Log in และ Register.
ตัวอย่าง Blade:

blade
คัดลอก
แก้ไข
@auth
    <a href="{{ url('/home') }}">Home</a>
@else
    <a href="{{ route('login') }}">Log in</a>
    @if (Route::has('register'))
        <a href="{{ route('register') }}">Register</a>
    @endif
@endauth
การออกแบบลิงก์:

ลิงก์มีเอฟเฟกต์ hover:
สีพื้นหลังเปลี่ยนเป็นสีขาวเมื่อวางเมาส์ (#fff).
ข้อความเปลี่ยนเป็นสีแดง (#ff2d20).
3. แสดงรายละเอียดบริษัท
เนื้อหาใน Section:
เพิ่มส่วน "About Us" เพื่อบอกข้อมูลเกี่ยวกับบริษัท เช่น:
"Our company specializes in delivering top-notch ERP and CRM solutions."

เพิ่มส่วน "Products and Services" แสดงรายการสินค้าและบริการ เช่น:
ERP Systems
CRM Tools
Business Consulting
Custom Software Development
4. เพิ่มข้อมูลการติดต่อ
Section Contact:
แสดงข้อมูลติดต่อ เช่น:
ที่อยู่: 1234 Main Street, Big City, Country
เบอร์โทรศัพท์: 081-234-5678
อีเมล: contact@ourcompany.com
ลิงก์โซเชียล: Facebook, Line, Website.
5. เพิ่ม Footer
แสดงข้อความลิขสิทธิ์ (Copyright) ด้านล่างสุด:
ตัวอย่าง:
html
คัดลอก
แก้ไข
<footer>
    <p>&copy; {{ date('Y') }} {{ config('app.name', 'Our Company') }}. All rights reserved.</p>
    <p>Powered by Laravel</p>
</footer>
6. การออกแบบด้วย CSS
ใช้ สีและขนาดข้อความ:

สีแดงหลัก (#ff2d20).
สีพื้นหลังขาว-เทา (#f9f9f9) เพื่อให้เนื้อหาอ่านง่าย.
การจัดวาง:

ใช้ Header ด้านบนสำหรับข้อความต้อนรับและลิงก์.
แยกเนื้อหาใน Section:
About Us
Products and Services
Contact Us
7. ทดสอบผลลัพธ์
ตรวจสอบในเบราว์เซอร์:
ไปที่ http://127.0.0.1:8000/.
ตรวจสอบ:
ข้อความต้อนรับแสดงถูกต้อง.
ลิงก์ Navigation ทำงานตามสถานะผู้ใช้.
เนื้อหา (About Us, Products, Contact) แสดงครบถ้วน.
Footer แสดงข้อมูลลิขสิทธิ์.
ผลลัพธ์ที่ได้
หน้า Welcome มีข้อความต้อนรับที่ชัดเจน.
มีลิงก์ไปยังหน้า Home, Log in, และ Register พร้อมเอฟเฟกต์สวยงาม.
แสดงรายละเอียดสินค้า, บริการ, และข้อมูลบริษัท.
Footer เพิ่มความสมบูรณ์ให้หน้าเว็บไซต์.

/////////////////////////////////////// upgrad welcome page ////////////////////////////////////
/////////////////////////////////////// การสร้าง products ////////////////////////////////////
# คู่มือการสร้างระบบ Products ใน Laravel

## บทนำ
ในคู่มือนี้ คุณจะได้เรียนรู้วิธีการสร้างระบบจัดการผลิตภัณฑ์ (Products) ใน Laravel ตั้งแต่การเตรียมโปรเจกต์ การตั้งค่าฐานข้อมูล การสร้าง Model, Migration, Controller และ View ตลอดจนการเชื่อมโยงข้อมูลอย่างละเอียดครบถ้วน เพื่อให้คุณสามารถนำไปใช้งานได้จริงโดยไม่ต้องค้นคว้าเพิ่มเติม

---

## การเตรียมโปรเจกต์

### 1. ติดตั้ง Laravel

ใช้คำสั่งด้านล่างเพื่อติดตั้ง Laravel:

```bash
composer create-project laravel/laravel products-app
```

### 2. เข้าไปที่โฟลเดอร์โปรเจกต์

```bash
cd products-app
```

### 3. ติดตั้ง Dependencies ที่จำเป็น

ติดตั้ง `Bootstrap` และ `Sass` เพื่อใช้จัดการ CSS:

```bash
npm install bootstrap@latest sass
npm run dev
```

---

## การตั้งค่าฐานข้อมูล

### 1. สร้างฐานข้อมูล

- เข้าไปที่ MySQL หรือเครื่องมือจัดการฐานข้อมูลที่คุณใช้ เช่น phpMyAdmin
- สร้างฐานข้อมูลชื่อ `products_app`

### 2. ตั้งค่าไฟล์ `.env`

แก้ไขการตั้งค่าฐานข้อมูลในไฟล์ `.env`:

```env
DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=products_app
DB_USERNAME=your_username
DB_PASSWORD=your_password
```

ทดสอบการเชื่อมต่อฐานข้อมูล:

```bash
php artisan migrate
```

---

## การสร้างระบบ Products

### 1. สร้าง Migration

ใช้คำสั่งเพื่อสร้างไฟล์ Migration สำหรับ Products:

```bash
php artisan make:migration create_products_table
```

เปิดไฟล์ `database/migrations/xxxx_xx_xx_xxxxxx_create_products_table.php` และเพิ่มโครงสร้างตาราง:

```php
public function up()
{
    Schema::create('products', function (Blueprint $table) {
        $table->id();
        $table->string('name');
        $table->text('description')->nullable();
        $table->decimal('price', 10, 2);
        $table->integer('stock');
        $table->string('taxid')->nullable();
        $table->timestamps();
    });
}
```

จากนั้นรันคำสั่ง:

```bash
php artisan migrate
```

### 2. สร้าง Model

ใช้คำสั่ง:

```bash
php artisan make:model Product
```

เปิดไฟล์ `app/Models/Product.php` และเพิ่มการกำหนด fillable attributes:

```php
protected $fillable = ['name', 'description', 'price', 'stock', 'taxid'];
```

### 3. สร้าง Controller

ใช้คำสั่ง:

```bash
php artisan make:controller ProductController --resource
```

เปิดไฟล์ `app/Http/Controllers/ProductController.php` และเพิ่มโค้ดต่อไปนี้ในแต่ละฟังก์ชัน:

#### ดึงข้อมูลทั้งหมด (index):
```php
public function index()
{
    $products = Product::all();
    return view('products.index', compact('products'));
}
```

#### แสดงฟอร์มสร้าง (create):
```php
public function create()
{
    return view('products.create');
}
```

#### บันทึกข้อมูลใหม่ (store):
```php
public function store(Request $request)
{
    $validated = $request->validate([
        'name' => 'required|max:255',
        'description' => 'nullable',
        'price' => 'required|numeric|min:0',
        'stock' => 'required|integer|min:0',
        'taxid' => 'nullable|string|max:20',
    ]);

    Product::create($validated);

    return redirect()->route('products.index')->with('success', 'Product created successfully!');
}
```

#### แก้ไขข้อมูล (edit):
```php
public function edit(Product $product)
{
    return view('products.edit', compact('product'));
}
```

#### อัปเดตข้อมูล (update):
```php
public function update(Request $request, Product $product)
{
    $validated = $request->validate([
        'name' => 'required|max:255',
        'description' => 'nullable',
        'price' => 'required|numeric|min:0',
        'stock' => 'required|integer|min:0',
        'taxid' => 'nullable|string|max:20',
    ]);

    $product->update($validated);

    return redirect()->route('products.index')->with('success', 'Product updated successfully!');
}
```

#### ลบข้อมูล (destroy):
```php
public function destroy(Product $product)
{
    $product->delete();

    return redirect()->route('products.index')->with('success', 'Product deleted successfully!');
}
```

### 4. ตั้งค่า Routes

เปิดไฟล์ `routes/web.php` และเพิ่ม:

```php
use App\Http\Controllers\ProductController;

Route::resource('products', ProductController::class);
```

---

## การสร้าง Views

### 1. View รายการสินค้า (`resources/views/products/index.blade.php`):

```blade.php
@extends('layouts.app')

@section('content')
<div class="container">
    <h1>Products</h1>
    <a href="{{ route('products.create') }}" class="btn btn-primary">Add Product</a>

    @if(session('success'))
        <div class="alert alert-success">{{ session('success') }}</div>
    @endif

    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Description</th>
                <th>Price</th>
                <th>Stock</th>
                <th>Tax ID</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach($products as $product)
            <tr>
                <td>{{ $product->id }}</td>
                <td>{{ $product->name }}</td>
                <td>{{ $product->description }}</td>
                <td>{{ $product->price }}</td>
                <td>{{ $product->stock }}</td>
                <td>{{ $product->taxid }}</td>
                <td>
                    <a href="{{ route('products.edit', $product) }}" class="btn btn-warning">Edit</a>
                    <form action="{{ route('products.destroy', $product) }}" method="POST" style="display:inline-block;">
                        @csrf
                        @method('DELETE')
                        <button class="btn btn-danger" type="submit">Delete</button>
                    </form>
                </td>
            </tr>
            @endforeach
        </tbody>
    </table>
</div>
@endsection
```

---

## ทดสอบการใช้งาน

1. รันเซิร์ฟเวอร์ด้วยคำสั่ง:

```bash
php artisan serve
```

2. เปิดเบราว์เซอร์และเข้าชม `http://127.0.0.1:8000/products`

---

## สรุป

คู่มือนี้ครอบคลุมขั้นตอนทั้งหมดในการสร้างระบบ Products ใน Laravel อย่างละเอียด ทั้งการตั้งค่าฐานข้อมูล การสร้าง Model, Controller, View และ Route พร้อมคำอธิบายที่สามารถนำไปใช้งานได้ทันที


/////////////////////////////////////// การสร้าง products ////////////////////////////////////
/////////////////////////////////////// update at 25 jan 2025 12.00  ////////////////////////

http://127.0.0.1:8000/ or welcome >>> it is work
http://127.0.0.1:8000/login >>> it is work
http://127.0.0.1:8000/logout >>> it is work
http://127.0.0.1:8000/dashboard >>> it is work
http://127.0.0.1:8000/customers >>> it is work
http://127.0.0.1:8000/products >>> it is work
ระบบ ถ้าไม่ login จะเข้า home + dashboard ไม่ได้  >>> it is work 

/////////////////////////////////////// update at 25 jan 2025 12.00  ////////////////////////
