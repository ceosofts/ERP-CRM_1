ขั้นตอนการทำงาน


//////////////////////////////  ระบบพื้นฐาน  ////////////////////////////////   
### **สรุปขั้นตอนการติดตั้งและตั้งค่าระบบ Laravel**

>>> เปิด Terminal
>>> cd เข้าไปใน folder ที่จะทำงาน

ตรวจสอบการติดตั้ง:
    >>> php -v
            PHP 8.3.16 (cli) (built: Jan 19 2025 13:45:13) (NTS)
            Copyright (c) The PHP Group
            Zend Engine v4.3.16, Copyright (c) Zend Technologies
            with Zend OPcache v8.3.16, Copyright (c), by Zend Technologies

    >>> composer --version 
            Composer version 2.8.4 2024-12-11 11:57:47
            PHP version 8.3.16 (/usr/bin/php8.3)
            Run the "diagnose" command to get more detailed diagnostics output.

    ตรวจสอบ Extensions ของ PHP
    >>> php -m

        ตรวจสอบว่ามี Extensions ต่อไปนี้หรือไม่:
            BCMath >>>ok installed
            Ctype >>>ok installed
            Fileinfo >>>ok installed
            JSON >>>ok installed
            Mbstring >>>ok installed
            OpenSSL >>>ok installed
            PDO >>>ok installed
            Tokenizer >>>ok installed
            XML >>>ok installed

        หากขาด ให้ติดตั้งผ่านคำสั่ง:

        >>> sudo apt install php-<extension_name> -y  >>>ok installed


#### **1. การติดตั้ง Linux และ PHP**
**ขั้นตอน:**
1. **ติดตั้ง WSL (Windows Subsystem for Linux):**
   - รันคำสั่งใน PowerShell (Run as Administrator):
     ```bash

    >>> wsl --install >>>ok installed

     ```
   - รีสตาร์ทเครื่องและเปิด Ubuntu เพื่อตั้งค่า.

2. **อัปเดตระบบและติดตั้ง PHP:**
   ```bash

    >>>wsl เพื่อเข้าไประบบ Linux

    ตรวจสอบว่า SQLite Driver ติดตั้งใน PHP หรือยัง
    ถ้าไม่มีผลลัพธ์ หรือไม่มี sqlite3 ในรายการ แปลว่า SQLite Driver ยังไม่ได้ติดตั้ง

    >>> php -m | grep sqlite

    ติดตั้ง SQLite Driver สำหรับ PHP

    >>> sudo apt update
    >>> sudo apt install php-sqlite3

    >>> sudo apt update && sudo apt upgrade -y >>>ok installed
    >>> sudo apt install php8.1 php8.1-cli php8.1-bcmath php8.1-mbstring php8.1-xml php8.1-curl php8.1-mysql php8.1-sqlite3 php8.1-zip -y >>>ok installed
   
   เมื่อติดตั้งเสร้จลองเช็คดูอีกที

   >>> php -m | grep sqlite

   ถ้าแสดงตามนี้คือโอเคร
    pdo_sqlite
    sqlite3

    รีสตาร์ทเซิร์ฟเวอร์ PHP (ถ้าจำเป็น)

    >>> sudo service apache2 restart
    >>> sudo service php8.3-fpm restart

    ใช้คำสั่งนี้เพื่อตรวจสอบเหตุผลที่ php8.3-fpm ไม่สามารถรีสตาร์ทได้:

    >>> sudo service php8.3-fpm status

    รันคำสั่งเพื่อตรวจสอบ log และค้นหาสาเหตุของปัญหา:

    >>> sudo journalctl -u php8.3-fpm

    หากยังไม่มีข้อมูล ลองเริ่มบริการ php8.3-fpm ด้วยคำสั่ง:
    >>> sudo service php8.3-fpm start

    ตรวจสอบ อีกครั้ง
    >>> sudo service php8.3-fpm status

    รันคำสั่งนี้เพื่อติดตั้ง net-tools:
    >>> sudo apt update
    >>> sudo apt install net-tools

    วิธีตรวจสอบพอร์ตของ php-fpm
    >>> sudo netstat -tulnp | grep php

   ```

3. **ติดตั้ง Composer:**
   - ดาวน์โหลด Composer:
     ```bash

    >>>ok installed

     curl -sS https://getcomposer.org/installer | php 
     sudo mv composer.phar /usr/local/bin/composer
     composer --version

     ```

---

#### **2. การสร้างโปรเจกต์ Laravel**
**ขั้นตอน:**
1. **สร้างโปรเจกต์ใหม่:**
   ```bash

   >>> composer create-project laravel/laravel ceosofts >>>ok installed

   >>> cd ceosofts

   ```

2. **ตั้งค่า APP_KEY:**
คำสั่ง php artisan key เป็นคำสั่งใน Laravel Framework ที่ใช้จัดการกับ Application Key หรือ APP_KEY 
ซึ่งเป็นคีย์สำคัญที่ Laravel ใช้สำหรับการเข้ารหัส (encryption) ข้อมูลต่าง ๆ เช่น session, cookies, 
และข้อมูลที่ต้องการความปลอดภัยสูง
   ```bash

   >>> php artisan key:generate >>>ok installed

   ```

//////////////////////////////  ระบบพื้นฐาน  ////////////////////////////////   
//////////////////////////////  การสร้างฐานข้อมูล  ////////////////////////////////
3. การตั้งค่าฐานข้อมูล
  3.1 แก้ไขไฟล์ .env
    เปิดไฟล์ .env และกำหนดค่าฐานข้อมูล เช่น:
    

    หากใช้ SQLite:
    env
    Copy
    Edit

    DB_CONNECTION=sqlite
    DB_DATABASE=[/mnt/c/Users/facad/Desktop/Developer/ERP-CRM_1/ceosofts/database/database.sqlite]
    DB_FOREIGN_KEYS=true

  3.2 สร้างฐานข้อมูล สำหรับ SQLite:

    ที่ Terminal >>> wsl >>>
    ใช้คำสั่ง touch เพื่อสร้างไฟล์ database.sqlite ในโฟลเดอร์ database:
    
    >>> touch database/database.sqlite

    ตรวจสอบว่าฐานข้อมูลถูกสร้างหรือไม่

    >>> ls database/

    ให้สิทธิ์การอ่านและเขียนสำหรับไฟล์ฐานข้อมูล:

    >>> chmod 777 database/database.sqlite

    หลังจากกำหนดค่าทุกอย่างเรียบร้อยแล้ว ให้รันคำสั่งต่อไปนี้เพื่อสร้างตาราง:

    >>> php artisan migrate


    เมื่อเปิดฐานข้อมูลสำเร็จ คุณสามารถพิมพ์คำสั่งต่อไปนี้เพื่อตรวจสอบตารางในฐานข้อมูล:
    
    หลังจากเข้าสู่ SQLite (โดยใช้คำสั่ง 

    >>> sqlite3 database/database.sqlite 

    .tables

        ceosoftslaptop@CeosoftsLapTop:/mnt/c/Users/facad/Desktop/Developer/ERP-CRM_1/ceosofts$ sqlite3 database/database.sqlite 
        SQLite version 3.31.1 2020-01-27 19:55:54
        Enter ".help" for usage hints.
        sqlite> .tables
        cache                  job_batches            password_reset_tokens
        cache_locks            jobs                   sessions
        failed_jobs            migrations             users
        sqlite>

    at teminal wsl 
    เพิ่มข้อมูลตัวอย่าง (Seeder): หากคุณต้องการเพิ่มข้อมูลตัวอย่างในฐานข้อมูล:
    >>> php artisan db:seed

    ใช้งานฐานข้อมูลผ่าน Tinker: ใช้ Laravel Tinker เพื่อทดสอบการดึงข้อมูลจากตาราง: at Terminal

    >>> php artisan tinker
    >>> \App\Models\User::all();

    ceosoftslaptop@CeosoftsLapTop:/mnt/c/Users/facad/Desktop/Developer/ERP-CRM_1/ceosofts$ php artisan tinker
 \App\Models\User::all();

Psy Shell v0.12.7 (PHP 8.3.16 — cli) by Justin Hileman

> \App\Models\User::all();
= Illuminate\Database\Eloquent\Collection {#5950
    all: [
      App\Models\User {#5541
        id: 1,
        name: "Test User",
        email: "test@example.com",
        email_verified_at: "2025-01-21 12:48:37",
        #password: "$2y$12$IJjBlnqtnprZV2oeNBnwO.N0.ZDsCtL.uLil48frcmOtyFLDfSsFq",
        #remember_token: "lnkgaakHLt",
        created_at: "2025-01-21 12:48:38",
        updated_at: "2025-01-21 12:48:38",
      },
    ],
  }

(END)

         ทดลองระบบ register
         email test1@example.com
         password 12345678


ตรวจสอบการตั้งค่าใน .env

DB_CONNECTION=sqlite
DB_DATABASE=/mnt/c/Users/facad/Desktop/Developer/ERP-CRM_1/ceosofts/database/database.sqlite

คุณสามารถหาตำแหน่งไฟล์ที่ถูกต้องได้ด้วยคำสั่ง: Terminal >>> wsl 
>>> realpath database/database.sqlite

หลังจากแก้ไข .env แล้ว ให้รีเฟรชการตั้งค่าของ Laravel:
>>> php artisan config:clear
>>> php artisan cache:clear


ตรวจสอบการเชื่อมต่อฐานข้อมูล at Terminal
>>> php artisan tinker
>>> DB::table('users')->get();

สร้างข้อมูลตัวอย่าง (Seeder)
>>> php artisan make:seeder UsersTableSeeder

//////////////////////////////  การสร้างฐานข้อมูล  ////////////////////////////////
//////////////////////////////  Authentication  ////////////////////////////////

ตรวจสอบระบบการสมัครสมาชิกและการเข้าสู่ระบบ
ติดตั้งแพ็กเกจ Breeze:

>>> composer require laravel/breeze --dev

ติดตั้งระบบ Authentication:

>>> php artisan breeze:install

ติดตั้ง dependencies ของ Frontend:

>>> npm install && npm run dev

รัน migrations เพื่อสร้างตารางสำหรับระบบ Authentication

>>> php artisan migrate

ติดตั้ง Laravel UI (ทางเลือก)  หากคุณต้องการใช้ระบบ Authentication แบบดั้งเดิม (เช่น Bootstrap):

>>> composer require laravel/ui

ติดตั้ง scaffolding สำหรับ Authentication:

>>> php artisan ui bootstrap --auth 

ติดตั้ง dependencies ของ Frontend

>>> npm install && npm run dev

รัน migrations

>>> php artisan migrate

เรียกใช้เซิร์ฟเวอร์

>>> php artisan serve

test ไปที่:
หน้า เข้าสู่ระบบ: http://127.0.0.1:8000/login
หน้า สมัครสมาชิก: http://127.0.0.1:8000/register


เพิ่มการจัดการบทบาทและสิทธิ์ (Roles & Permissions)

>>> composer require spatie/laravel-permission

***note 
1.ตอนนี้สามารถเข้า http://127.0.0.1:8000/ โดยยังเป็นของ Laravel อยู่
2.สามารถเข้า http://127.0.0.1:8000/login >>> http://127.0.0.1:8000/home
2.สามารถเข้า http://127.0.0.1:8000/register  >>> http://127.0.0.1:8000/home
3.สามารถ logout ได้ 
4.ยังไม่มีหน้า http://127.0.0.1:8000/dashboard
5.ระบบ ลืม password ใช้ได้



         ทดลองระบบ register
         email test1@example.com
         password 12345678

////////////////////////////// Authentication  ////////////////////////////////


//////////////////////////////  ออกแบบโครงสร้างฐานข้อมูล  ////////////////////////


การดำเนินงานแบบละเอียด ทุกขั้นตอนที่จำเป็นในการพัฒนาระบบพื้นฐานของ ERP-CRM:

1. ออกแบบโครงสร้างฐานข้อมูล
1.1 ระบบฝ่ายขาย (Sales)
สร้างฐานข้อมูลเพื่อจัดเก็บข้อมูลการขาย:

ตารางที่เกี่ยวข้อง:
Customers: เก็บข้อมูลลูกค้า
Products: เก็บข้อมูลสินค้า
Orders: เก็บข้อมูลคำสั่งซื้อ
Order Items: เก็บรายการสินค้าในคำสั่งซื้อ
ขั้นตอนการสร้างฐานข้อมูล

/////////////////////////////  สร้าง Migration  /////////////////////////////////

สร้าง Model และ Migration ใช้คำสั่งเพื่อสร้าง Model พร้อมกับ Migration: หรือ สร้างไฟล์ ช่องในตาราง ฐานข้อมูล

>>>
php artisan make:model Customer -m
php artisan make:model Product -m
php artisan make:model Order -m
php artisan make:model OrderItem -m
>>>

/////////////////////////////  สร้าง Migration  /////////////////////////////////
/////////////////////////////  แก้ไข Migration  /////////////////////////////////

แก้ไขไฟล์ Migration: เปิดไฟล์ในโฟลเดอร์ database/migrations เช่น xxxx_xx_xx_xxxxxx_create_customers_table.php และเพิ่มโครงสร้าง:

หรือ สร้าง ช่องในตาราง ฐานข้อมูล

        ////////////////////โค้ดเดิม////////////////////////

        <?php

            use Illuminate\Database\Migrations\Migration;
            use Illuminate\Database\Schema\Blueprint;
            use Illuminate\Support\Facades\Schema;

            return new class extends Migration
            {
                /**
                * Run the migrations.
                */
                public function up(): void
                {
                    Schema::create('customers', function (Blueprint $table) {
                        $table->id();
                        $table->timestamps();
                    });
                }

                /**
                * Reverse the migrations.
                */
                public function down(): void
                {
                    Schema::dropIfExists('customers');
                }
            };

        //////////////////โค้ดใหม่/////////////////////////

        <?php

            use Illuminate\Database\Migrations\Migration;
            use Illuminate\Database\Schema\Blueprint;
            use Illuminate\Support\Facades\Schema;

            return new class extends Migration
            {
                /**
                * Run the migrations.
                */
                public function up(): void
                {
                    Schema::create('customers', function (Blueprint $table) {
                        $table->id();


                        $table->string('name'); // ชื่อลูกค้า >>>เพิ่มจากของเดิม
                        $table->string('email')->unique(); // อีเมล ต้องไม่ซ้ำ >>>เพิ่มจากของเดิม
                        $table->string('phone')->nullable(); // เบอร์โทรศัพท์ (ไม่จำเป็นต้องมี) >>>เพิ่มจากของเดิม
                        $table->string('address')->nullable(); // ที่อยู่ (ไม่จำเป็นต้องมี) >>>เพิ่มจากของเดิม
                        $table->string('taxid')->nullable(); //  taxid (ไม่จำเป็นต้องมี) >>>เพิ่มจากของเดิม


                        $table->timestamps();
                    });
                }

                /**
                * Reverse the migrations.
                */
                public function down(): void
                {
                    Schema::dropIfExists('customers');
                }
            };



        Schema::create('customers', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique();
            $table->string('phone')->nullable();
            $table->timestamps();
        });


ตัวอย่างโครงสร้างของ Orders:

php
Copy
Edit
Schema::create('orders', function (Blueprint $table) {
    $table->id();
    $table->foreignId('customer_id')->constrained()->onDelete('cascade');
    $table->date('order_date');
    $table->decimal('total_amount', 10, 2);
    $table->timestamps();
});


ตัวอย่างโครงสร้างของ Order Items:

php
Copy
Edit
Schema::create('order_items', function (Blueprint $table) {
    $table->id();

    $table->foreignId('order_id')->constrained()->onDelete('cascade');
    $table->foreignId('product_id')->constrained()->onDelete('cascade');
    $table->integer('quantity');
    $table->decimal('unit_price', 10, 2);
    
    $table->timestamps();
});


รัน Migration: เมื่อแก้ไขทุกไฟล์แล้ว ให้รันคำสั่ง:

>>> php artisan migrate

/////////////////////////////  แก้ไข Migration  /////////////////////////////////
/////////////////////////////  ทดลองใส่ข้อมูล  /////////////////////////////////

เพิ่ม Seeder (ข้อมูลตัวอย่าง): ใช้คำสั่ง:

>>> php artisan make:seeder CustomersTableSeeder
>>> php artisan make:seeder ProductsTableSeeder
>>> php artisan make:seeder OrdersTableSeeder
>>> php artisan make:seeder OrderItemsTableSeeder

หมายเหตุ ต้องพิมพ์ให้เหมือนกัน จากโค้ดใน file นั้นๆ >>> จุดนี้ >>> Schema::create('order_items', >>>


เพิ่มข้อมูลในไฟล์ Seeder: ข้อมูลตัวอย่างเพื่อลองแสดง
ไปที่ไฟล์ที่สร้างในโฟลเดอร์ database/seeders และเพิ่มข้อมูลตัวอย่างในแต่ละไฟล์ เช่น:
CustomersTableSeeder.php


//>>>เพิ่มจากของเดิม
\App\Models\Customer::create([
    'name' => 'John Doe',
    'email' => 'john@example.com',
    'phone' => '123456789',
]);
//>>>เพิ่มจากของเดิม

หมายเหตุ ชื่อช่อง ข้อมูลต้องตรงกันกับ file in migrations

รันคำสั่ง Seed:

>>> php artisan db:seed --class=CustomersTableSeeder
>>> php artisan db:seed --class=ProductsTableSeeder
>>> php artisan db:seed --class=OrdersTableSeeder
>>> php artisan db:seed --class=OrderItemsTableSeeder

หรือ หลังจากแก้ไขไฟล์ Seeder เสร็จสิ้น ให้รันคำสั่งเพื่อ Seed ข้อมูลทั้งหมด: แต่ก็ไม่ควรทำดีกว่า

>>> php artisan db:seed

/////////////////////////////  ทดลองใส่ข้อมูล  /////////////////////////////////
*******************************************************************************

หลังจากที่คุณสร้าง Seeder และเพิ่มข้อมูลตัวอย่างลงในฐานข้อมูลแล้ว 
ขั้นตอนถัดไปขึ้นอยู่กับเป้าหมายของโครงการ ERP-CRM ต่อไปนี้เป็นแนวทางที่สามารถทำได้:

1. ทดสอบข้อมูลในฐานข้อมูล
ตรวจสอบว่าข้อมูลในฐานข้อมูลถูกเพิ่มเรียบร้อยหรือไม่:

ใช้ Tinker:

>>> php artisan tinker

ตัวอย่างการตรวจสอบข้อมูล:

>>> \App\Models\Customer::all(); >>>ok // ดูข้อมูลลูกค้าทั้งหมด
>>> \App\Models\Product::all(); >>>ok // ดูข้อมูลสินค้าทั้งหมด
>>> \App\Models\Order::all(); >>>ok // ดูข้อมูลสินค้าทั้งหมด
>>> \App\Models\OrderItem::all(); >>>ok // สังเกตุว่าชื่อ ต้องตรงกันกับ ไฟล์ app/Models/OrderItem.php

>>> \App\Models\Order::with('orderItems')->get(); // ดูคำสั่งซื้อพร้อมรายการสินค้า


ตรวจสอบผ่าน SQLite CLI (ถ้าคุณใช้ SQLite):

>>> sqlite3 database/database.sqlite
>>> SELECT * FROM customers; >>>ok
>>> SELECT * FROM products; >>>ok
>>> SELECT * FROM orders; >>>ok
>>> SELECT * FROM order_items; >>>ok
หรือ
.tables


2. พัฒนา Controller และ Routes
ตอนนี้คุณมีฐานข้อมูลพร้อมแล้ว คุณสามารถสร้าง Controller เพื่อจัดการข้อมูลจากแต่ละตาราง:

สร้าง Controller สำหรับแต่ละโมดูล:
โดยตั้งชื่อ file ให้เข้าไปดูใน C:\Users\facad\Desktop\Developer\ERP-CRM_1\ceosofts\database\seeders

>>> php artisan make:controller CustomerController --resource
>>> php artisan make:controller ProductController --resource
>>> php artisan make:controller OrderController --resource
>>> php artisan make:controller OrderItemController --resource


เพิ่ม Routes ใน routes/web.php: ตัวอย่าง:

>>> 
use App\Http\Controllers\CustomerController;
use App\Http\Controllers\ProductController;
use App\Http\Controllers\OrderController;
use App\Http\Controllers\OrderItemController;
>>> 

>>> 
Route::resource('customers', CustomerController::class);
Route::resource('products', ProductController::class);
Route::resource('orders', OrderController::class);
Route::resource('orders', OrderItemController::class);
>>> 

พัฒนา Methods ใน Controller: ตัวอย่างใน CustomerController.php:

>>> 
public function index()
{
    $customers = \App\Models\Customer::all(); //>>> เพิ่มใหม่
    return view('customers.index', compact('customers')); //>>> เพิ่มใหม่
}

public function show($id)
{
    $customer = \App\Models\Customer::findOrFail($id); //>>> เพิ่มใหม่
    return view('customers.show', compact('customer')); //>>> เพิ่มใหม่
}
>>> 


ทดสอบเข้าหน้า
http://localhost:8000/ >>> ok
http://localhost:8000/register >>> ok
http://localhost:8000/login  >>> ok
http://localhost:8000/dashboard >>> ยังไม่ได้
http://localhost:8000/products >>> ยังไม่ได้ เป็นหน้าเปล่าๆ

///////////////////////////////////////////////  ทำถึงตรงนี้ 22 Jan 2025 /////////////////////////////////


การทำงานของแต่ละฟังก์ชัน:
index

ดึงข้อมูลลูกค้าทั้งหมดจากฐานข้อมูล (Customer::all()) และส่งข้อมูลไปยัง View customers.index
View ควรจะแสดงรายการลูกค้าทั้งหมดในรูปแบบตารางหรือรายการ
create

แสดงฟอร์มสำหรับเพิ่มลูกค้าใหม่ (customers.create)
View นี้ควรมีฟอร์มที่ส่งข้อมูลไปยังฟังก์ชัน store
store

รับข้อมูลจากฟอร์ม create ผ่าน $request และบันทึกข้อมูลใหม่ลงในฐานข้อมูล (Customer::create($request->all()))
หลังจากบันทึกเสร็จ ระบบจะ redirect กลับไปยังหน้ารายการลูกค้า (customers.index)
show

แสดงข้อมูลรายละเอียดของลูกค้าตาม id ที่ส่งมา (Customer::findOrFail($id))
View customers.show ควรจะแสดงรายละเอียดของลูกค้าคนเดียว
edit

แสดงฟอร์มแก้ไขข้อมูลลูกค้า (customers.edit) พร้อมข้อมูลปัจจุบัน
View นี้ควรมีฟอร์มที่ส่งข้อมูลไปยังฟังก์ชัน update
update

รับข้อมูลจากฟอร์มแก้ไข (edit) ผ่าน $request และอัปเดตข้อมูลในฐานข้อมูล
หลังจากอัปเดตเสร็จ ระบบจะ redirect กลับไปยังหน้ารายการลูกค้า (customers.index)
destroy

ลบข้อมูลลูกค้าตาม id ที่ส่งมา (Customer::findOrFail($id) และ $customer->delete())
หลังจากลบเสร็จ ระบบจะ redirect กลับไปยังหน้ารายการลูกค้า (customers.index)


///////////////////////////////////////////////  อธิบายโค้ด  /////////////////////////////////

ข้อแนะนำเพิ่มเติม:
การตรวจสอบ Validation
ควรเพิ่มการตรวจสอบ Validation ในฟังก์ชัน store และ update เพื่อป้องกันข้อมูลที่ไม่ถูกต้อง เช่น:

public function store(Request $request)
{
    $validated = $request->validate([
        'name' => 'required|string|max:255',
        'email' => 'required|email|unique:customers',
        'phone' => 'nullable|string|max:15',
        'address' => 'nullable|string',
    ]);

    \App\Models\Customer::create($validated);
    return redirect()->route('customers.index');
}


การใช้ Mass Assignment
ใน Model Customer ควรระบุ fillable fields เพื่อป้องกันการโจมตีแบบ Mass Assignment:

protected $fillable = ['name', 'email', 'phone', 'address'];

ตรวจสอบ Route Resource
ตรวจสอบว่าได้เพิ่ม Route Resource ใน routes/web.php:


Route::resource('customers', CustomerController::class);

การสร้าง View
ตรวจสอบว่าได้สร้าง View ในโฟลเดอร์ resources/views/customers/ เช่น:

index.blade.php
create.blade.php
edit.blade.php
show.blade.php

การจัดการ Flash Message
คุณสามารถเพิ่ม Flash Message เพื่อแจ้งเตือนผู้ใช้เมื่อมีการเพิ่ม/แก้ไข/ลบข้อมูล:

return redirect()->route('customers.index')->with('success', 'Customer created successfully.');

โค้ดของคุณถือว่าถูกต้องและพร้อมใช้งานครับ หากต้องการคำแนะนำเพิ่มเติมเกี่ยวกับ View หรือ Validation แจ้งมาได้เลยครับ! 😊


//////////////////////////////////////////////////////////////////////////////////////////////////

3. พัฒนา Views
สร้าง Blade Template สำหรับแสดงผลข้อมูล:

สร้างโฟลเดอร์ resources/views/customers:

>>> mkdir resources/views/customers

สร้างไฟล์ index.blade.php สำหรับแสดงรายชื่อลูกค้า:

>>> 
<!-- resources/views/customers/index.blade.php -->
<h1>Customers</h1>
<table>
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Email</th>
            <th>Phone</th>
        </tr>
    </thead>
    <tbody>
        @foreach ($customers as $customer)
            <tr>
                <td>{{ $customer->id }}</td>
                <td>{{ $customer->name }}</td>
                <td>{{ $customer->email }}</td>
                <td>{{ $customer->phone }}</td>
            </tr>
        @endforeach
    </tbody>
</table>
>>> 

เชื่อมโยงกับ Controller: ตอนนี้ เมื่อคุณเข้าถึง /customers ระบบจะแสดงข้อมูลลูกค้าในหน้าเว็บ

4. สร้างหน้า Dashboard
Dashboard จะเป็นหน้าแรกที่ผู้ใช้เห็นหลังจากเข้าสู่ระบบ:

เพิ่ม Route สำหรับ Dashboard:

>>> 
Route::get('/dashboard', function () {
    $orders = \App\Models\Order::latest()->take(5)->get();
    $products = \App\Models\Product::count();
    return view('dashboard', compact('orders', 'products'));
})->middleware(['auth']);
>>> 

สร้าง Blade Template:

>>> 
<!-- resources/views/dashboard.blade.php -->
<h1>Dashboard</h1>
<p>Total Products: {{ $products }}</p>
<h2>Recent Orders</h2>
<ul>
    @foreach ($orders as $order)
        <li>Order #{{ $order->order_number }} - {{ $order->total_amount }}</li>
    @endforeach
</ul>
>>> 

5. เพิ่มสิทธิ์การเข้าถึง (Authentication และ Authorization)
ตั้งค่า Middleware สำหรับ Route: เพิ่ม Middleware auth ใน Route ที่ต้องการป้องกันการเข้าถึง:

Route::resource('customers', CustomerController::class)->middleware('auth');

ติดตั้ง Spatie Laravel Permissions (ถ้าต้องการ Role-Based Access Control):

>>> composer require spatie/laravel-permission

กำหนดสิทธิ์: สร้างบทบาท เช่น Admin หรือ Manager และตรวจสอบสิทธิ์ใน Controller.

6. ทดสอบระบบ
เพิ่มข้อมูลตัวอย่าง: รัน Seeder เพื่อเพิ่มข้อมูลใหม่:

>>> php artisan db:seed

ทดสอบในเบราว์เซอร์:

ไปที่ /customers เพื่อดูรายชื่อลูกค้า
ไปที่ /products เพื่อดูสินค้า
ไปที่ /orders เพื่อดูคำสั่งซื้อ
ใช้ PHPUnit ทดสอบ: สร้าง Unit Test:


>>> php artisan make:test CustomerTest

เพิ่มการทดสอบ เช่น:

>>> 
public function test_customer_index_page()
{
    $response = $this->get('/customers');
    $response->assertStatus(200);
}
>>> 

รันการทดสอบ:

>>> php artisan test

7. ปรับแต่ง UI/UX
ใช้ Frontend Framework เช่น Bootstrap หรือ TailwindCSS:

>>> npm install bootstrap
>>> npm run dev

ปรับแต่ง Sidebar, Navbar และ Layout ให้ใช้งานง่าย.

สรุป
ตรวจสอบข้อมูลในฐานข้อมูล: ใช้ Tinker หรือ SQLite CLI
พัฒนา Controller และ Routes: จัดการการแสดงผลข้อมูล
สร้าง View: ออกแบบหน้าเว็บสำหรับแสดงผล
สร้าง Dashboard: สรุปข้อมูลสำคัญในหน้าเดียว
เพิ่มการป้องกัน: ใช้ Authentication และ Authorization
ทดสอบระบบ: ตรวจสอบการทำงานผ่าน PHPUnit และเบราว์เซอร์
หากต้องการเจาะลึกส่วนใด แจ้งมาได้เลยครับ! 😊


***********************************************************************************

1.2 ระบบคลังสินค้า (Inventory)
ตารางที่เกี่ยวข้อง:
Products: ใช้ร่วมกับระบบขาย
Stock Movements: บันทึกการเพิ่ม-ลดสินค้าจากคลัง
ขั้นตอนการสร้างฐานข้อมูล
สร้าง Model และ Migration:

bash
Copy
Edit
php artisan make:model StockMovement -m
แก้ไขไฟล์ Migration: ตัวอย่างโครงสร้าง:

php
Copy
Edit
Schema::create('stock_movements', function (Blueprint $table) {
    $table->id();
    $table->foreignId('product_id')->constrained()->onDelete('cascade');
    $table->integer('quantity');
    $table->string('type'); // 'in' หรือ 'out'
    $table->timestamps();
});
รัน Migration:

bash
Copy
Edit
php artisan migrate
2. พัฒนา UI/UX
2.1 หน้า Login และ Register
Laravel Breeze หรือ Laravel UI ถูกใช้สำหรับระบบ Authentication

ขั้นตอนการติดตั้ง (Laravel Breeze):
ติดตั้งแพ็กเกจ:

bash
Copy
Edit
composer require laravel/breeze --dev
ติดตั้ง Scaffolding:

bash
Copy
Edit
php artisan breeze:install
ติดตั้ง Dependencies:

bash
Copy
Edit
npm install && npm run dev
รัน Migration:

bash
Copy
Edit
php artisan migrate
ทดสอบหน้า Login และ Register:

เปิดเบราว์เซอร์ที่ http://127.0.0.1:8000/login
สมัครสมาชิกและเข้าสู่ระบบ
2.2 สร้าง Sidebar และ Dropdown Menu
โครงสร้าง HTML ตัวอย่าง:

html
Copy
Edit
<nav>
    <ul>
        <li><a href="/dashboard">Dashboard</a></li>
        <li>
            <a href="#">Sales</a>
            <ul>
                <li><a href="/sales/orders">Orders</a></li>
                <li><a href="/sales/customers">Customers</a></li>
            </ul>
        </li>
        <li>
            <a href="#">Inventory</a>
            <ul>
                <li><a href="/inventory/products">Products</a></li>
                <li><a href="/inventory/stock">Stock Movements</a></li>
            </ul>
        </li>
    </ul>
</nav>
ปรับแต่งด้วย CSS/JavaScript:

ใช้ Framework เช่น Bootstrap หรือ TailwindCSS เพื่อทำให้ Sidebar สวยงามและใช้งานง่าย
3. ทดสอบระบบ
ทดสอบการเพิ่ม/ลบข้อมูล: ใช้ Laravel Tinker:

bash
Copy
Edit
php artisan tinker
>>> \App\Models\Customer::all();
สร้าง Unit Test:

bash
Copy
Edit
php artisan make:test CustomerTest
เพิ่มการทดสอบในไฟล์ tests/Feature/CustomerTest.php:

php
Copy
Edit
public function test_create_customer()
{
    $response = $this->post('/customers', [
        'name' => 'Test Customer',
        'email' => 'test@example.com',
        'phone' => '123456789',
    ]);

    $response->assertStatus(201);
}
รันการทดสอบ:

bash
Copy
Edit
php artisan test
สรุปขั้นตอน:
ออกแบบฐานข้อมูล (Sales, Inventory)
ติดตั้ง Authentication (Login, Register)
สร้าง Sidebar Menu และ UI เบื้องต้น
ทดสอบระบบการทำงาน
แจ้งได้เลยว่าต้องการให้ขยายความในส่วนไหนเพิ่มเติมครับ! 😊
















4. การพัฒนาโปรเจกต์
  4.1 สร้าง Controller และ Route

    สร้าง Controller:
    >>> php artisan make:controller MyController

    เพิ่ม Route ใน routes/web.php:
    >>> Route::get('/example', [MyController::class, 'index']);

  4.2 สร้าง View
    สร้างไฟล์ View:
    >>> touch resources/views/example.blade.php

    เพิ่มเนื้อหาใน View เช่น:html
    <h1>Welcome to My Project</h1>

3. **รันเซิร์ฟเวอร์ Laravel:**
   >>> php artisan serve

   - เปิดเบราว์เซอร์ที่: `http://127.0.0.1:8000`.


#### **3. การตั้งค่าฐานข้อมูล**
1. **แก้ไขไฟล์ `.env`:**
   - ตั้งค่าการเชื่อมต่อฐานข้อมูล:
    >>> 
     DB_CONNECTION=mysql
     DB_HOST=127.0.0.1
     DB_PORT=3306
     DB_DATABASE=laravel_db
     DB_USERNAME=root
     DB_PASSWORD=your_password
    >>> 

2. **สร้างฐานข้อมูล (MySQL):**
    >>> 
   sudo mysql -u root -p
   CREATE DATABASE laravel_db;
    >>> 

3. **รัน Migration:**
    >>> 
   php artisan migrate
    >>> 

#### **4. การตรวจสอบระบบ**
1. **เช็คสถานะ PHP และ Composer:**
    >>> 
   php -v
   composer --version
    >>> 

2. **ตรวจสอบ Key และ Cache:**
    >>> 
   php artisan env
   php artisan config:clear
   php artisan cache:clear
    >>> 

3. **ตรวจสอบฐานข้อมูล:**
   >>> php artisan migrate:status

#### **5. การพัฒนาโปรเจกต์**
1. **สร้าง Controller:**
   >>> php artisan make:controller ExampleController


2. **เพิ่ม Route ทดสอบใน `routes/web.php`:**

   Route::get('/test', function () {
       return 'Laravel is working!';
   });

3. **สร้าง View ทดสอบ:**
   >>> touch resources/views/example.blade.php

   เพิ่มเนื้อหาใน View:
   ```html
   <h1>Welcome to Laravel</h1>


4. **ตรวจสอบในเบราว์เซอร์:**
   - URL: `http://127.0.0.1:8000/test`.

#### **6. การจัดการปัญหา**
1. **ลบไฟล์และโฟลเดอร์ที่ติดขัด:**
   >>> rm -rf vendor composer.lock
   >>> composer install

2. **ตรวจสอบสิทธิ์โฟลเดอร์:**
   - ตรวจสอบและตั้งค่า **Full Control** บนโฟลเดอร์โปรเจกต์.

3. **ปิดโปรแกรมที่ล็อคไฟล์:**
   - ปิด Windows Search Indexer และ Antivirus ชั่วคราว.

#### **7. การใช้งาน Laravel อย่างต่อเนื่อง**
- หากต้องการสร้างโปรเจกต์ใหม่:
  >>> composer create-project laravel/laravel new_project

- ตั้งค่าโครงสร้างโปรเจกต์ตาม `.env` และใช้คำสั่ง:
  >>> php artisan migrate
  >>> php artisan serve

//////////////////////////////  ระบบพื้นฐาน  ////////////////////////////////  