1. ติดตั้ง Laravel และตั้งค่าพื้นฐาน

1.1 ติดตั้ง Composer

Composer เป็นตัวจัดการแพ็กเกจที่ Laravel ใช้:

คำสั่งใน Terminal:
bash
Copy
Edit

composer --version

PS C:\Users\facad\Desktop\Developer\ERP-CRM_1> composer --version
>> 
Composer version 2.8.4 2024-12-11 11:57:47
PHP version 8.2.12 (C:\xampp\php\php.exe)
Run the "diagnose" command to get more detailed diagnostics output.
PS C:\Users\facad\Desktop\Developer\ERP-CRM_1> 


หากยังไม่ได้ติดตั้ง ดาวน์โหลดได้จาก getcomposer.org.

1.2 สร้างโปรเจกต์ Laravel

คำสั่งใน Terminal:
bash
Copy
Edit

composer create-project laravel/laravel example-app
cd example-app

    การสร้างโปรเจกต์ Laravel ด้วยคำสั่ง composer เป็นกระบวนการเริ่มต้นสำหรับการตั้งค่าโครงสร้างโปรเจกต์ใหม่ ต่อไปนี้คือคำอธิบายและการทำงานของคำสั่งที่ใช้:

    1. คำสั่งที่ใช้
    คำสั่งที่ 1: สร้างโปรเจกต์ Laravel
    bash
    Copy
    Edit

    composer create-project laravel/laravel example-app

    >>> composer create-project laravel/laravel ceosofts


    composer:
    เป็นตัวจัดการแพ็กเกจสำหรับ PHP ที่ช่วยดาวน์โหลดและติดตั้ง Laravel รวมถึงไลบรารีอื่นๆ ที่ Laravel ต้องการ
    create-project:
    ใช้สำหรับสร้างโปรเจกต์ใหม่จากแพ็กเกจ
    laravel/laravel:
    ชื่อของแพ็กเกจที่ใช้สร้างโปรเจกต์ Laravel
    example-app:
    ชื่อของโฟลเดอร์ที่จะเก็บโปรเจกต์ Laravel (คุณสามารถเปลี่ยนชื่อเป็นชื่อที่คุณต้องการ เช่น my-project)
    เมื่อรันคำสั่งนี้:

    Composer จะดาวน์โหลดโครงสร้าง Laravel ที่จำเป็นจาก repository อย่างเป็นทางการ
    สร้างโครงสร้างไฟล์และโฟลเดอร์ เช่น:
    arduino
    Copy
    Edit

    example-app/
    ├── app/
    ├── bootstrap/
    ├── config/
    ├── database/
    ├── public/
    ├── resources/
    ├── routes/
    ├── storage/
    ├── tests/
    └── .env

    คำสั่งที่ 2: เข้าไปในโฟลเดอร์โปรเจกต์
    bash
    Copy
    Edit

    >>> cd ceosofts

    cd:
    คำสั่งใน Linux, macOS หรือ Windows เพื่อเปลี่ยนโฟลเดอร์ปัจจุบันไปยังโฟลเดอร์ที่สร้างขึ้น (example-app)
    หลังจากคำสั่งนี้: คุณจะอยู่ในโฟลเดอร์ของโปรเจกต์ Laravel

    2. ตรวจสอบว่าโปรเจกต์สร้างสำเร็จ
    หลังจากเข้าไปในโฟลเดอร์ของโปรเจกต์ (example-app) คุณสามารถตรวจสอบว่าโปรเจกต์ถูกสร้างสำเร็จหรือไม่:

    คำสั่งใน Terminal:
    bash
    Copy
    Edit

   >>> ls

    หรือบน Windows:

    bash
    Copy
    Edit

    dir

    คุณควรเห็นโครงสร้างไฟล์และโฟลเดอร์ที่เกี่ยวข้องกับ Laravel เช่น app/, public/, .env, และอื่นๆ

    3. ทดสอบการทำงานของ Laravel
    คำสั่งใน Terminal:
    bash
    Copy
    Edit

   >>> php artisan serve

    คำสั่งนี้จะรันเซิร์ฟเวอร์ Development ของ Laravel
    URL สำหรับเข้าถึงโปรเจกต์คือ: http://127.0.0.1:8000
    เมื่อเปิด URL นี้ในเบราว์เซอร์ คุณควรเห็นหน้าเริ่มต้นของ Laravel พร้อมข้อความ:

    arduino
    Copy
    Edit
    Laravel
    Your application is ready.

    4. ปัญหาที่อาจพบ
    Composer ไม่พบคำสั่ง

    ตรวจสอบว่า Composer ติดตั้งสำเร็จแล้วหรือไม่:
    bash
    Copy
    Edit
    composer --version
    หากไม่สำเร็จ ให้ดาวน์โหลด Composer จาก getcomposer.org.
    PHP เวอร์ชันไม่รองรับ

    Laravel ต้องการ PHP เวอร์ชัน 8.1 ขึ้นไป (ตรวจสอบด้วยคำสั่ง php -v)
    5. สรุปการทำงาน
    ใช้คำสั่ง composer create-project laravel/laravel example-app เพื่อสร้างโครงสร้างโปรเจกต์ Laravel
    ใช้คำสั่ง cd example-app เพื่อเข้าไปในโฟลเดอร์โปรเจกต์
    ทดสอบการทำงานด้วย php artisan serve และตรวจสอบผลในเบราว์เซอร์


1.3 ตั้งค่าไฟล์ .env

เปิดไฟล์ .env (อยู่ใน root directory ของโปรเจกต์)
ตั้งค่าการเชื่อมต่อฐานข้อมูล:
ตัวอย่างสำหรับ SQLite:
env
Copy
Edit

DB_CONNECTION=sqlite
DB_DATABASE=/absolute/path/to/database.sqlite

ตัวอย่างสำหรับ MySQL:
env
Copy
Edit

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=your_database_name
DB_USERNAME=your_username
DB_PASSWORD=your_password

สร้างไฟล์ฐานข้อมูล (สำหรับ SQLite):
คำสั่งใน Terminal:
bash
Copy
Edit
touch database/database.sqlite

1.4 ตั้งค่า Key ของแอปพลิเคชัน

คำสั่งใน Terminal:
bash
Copy
Edit
php artisan key:generate
Laravel จะสร้าง APP_KEY ในไฟล์ .env
1.5 รันเซิร์ฟเวอร์
คำสั่งใน Terminal:
bash
Copy
Edit
php artisan serve
ระบบจะรันที่: http://127.0.0.1:8000

2. ตั้งค่าโครงสร้างพื้นฐานของฐานข้อมูล

2.1 ตรวจสอบ Migration ที่มี

Laravel มี Migration เริ่มต้นสำหรับผู้ใช้ (users):

คำสั่งใน Terminal:
bash
Copy
Edit
php artisan migrate:status

2.2 รัน Migration

คำสั่งใน Terminal:
bash
Copy
Edit
php artisan migrate

3. เพิ่มข้อมูลทดสอบในฐานข้อมูล

ใช้ Tinker เพื่อเพิ่มข้อมูลทดสอบ:

คำสั่งใน Terminal:
bash
Copy
Edit
php artisan tinker
ตัวอย่างการเพิ่มข้อมูลผู้ใช้:
php
Copy
Edit
\App\Models\User::create([
    'name' => 'Admin User',
    'email' => 'admin@example.com',
    'password' => bcrypt('password123'),
]);

4. สร้าง Route และ View ทดสอบ

4.1 สร้าง Route

เปิดไฟล์ routes/web.php
เพิ่ม Route ทดสอบ:
php
Copy
Edit
Route::get('/test', function () {
    return 'Laravel is working!';
});

4.2 ตรวจสอบในเบราว์เซอร์

เปิด URL: http://127.0.0.1:8000/test
หากแสดงข้อความ "Laravel is working!" แสดงว่าระบบทำงานปกติ

5. การจัดการฟีเจอร์พื้นฐาน

5.1 สร้าง Controller

คำสั่งใน Terminal:
bash
Copy
Edit
php artisan make:controller ExampleController
5.2 สร้าง View
สร้างไฟล์ View เช่น resources/views/example.blade.php
คำสั่งใน Terminal:
bash
Copy
Edit
touch resources/views/example.blade.php

6. การเช็คสถานะและแก้ไขปัญหา

6.1 เช็คสถานะการเชื่อมต่อฐานข้อมูล

คำสั่งใน Terminal:
bash
Copy
Edit
php artisan migrate:status
6.2 ตรวจสอบ Key ของแอป
คำสั่งใน Terminal:
bash
Copy
Edit
php artisan env

6.3 ล้าง Cache หากมีปัญหา

ล้างการตั้งค่าที่ Cache ไว้:
bash
Copy
Edit

php artisan config:clear
php artisan cache:clear
php artisan route:clear
php artisan view:clear

7. การทดสอบระบบ

7.1 ทดสอบผ่านเบราว์เซอร์

เปิด URL:
http://127.0.0.1:8000/
http://127.0.0.1:8000/test

7.2 ทดสอบการสร้างข้อมูล

เพิ่มข้อมูลผ่านฟอร์มในหน้าเว็บ
ตรวจสอบว่าข้อมูลถูกบันทึกในฐานข้อมูลหรือไม่
สรุป
ติดตั้ง Laravel และตั้งค่าฐานข้อมูลในไฟล์ .env
รันเซิร์ฟเวอร์และตรวจสอบระบบทำงานผ่านเบราว์เซอร์
ใช้คำสั่ง Migration เพื่อสร้างโครงสร้างฐานข้อมูล
เพิ่มข้อมูลทดสอบและตรวจสอบผลลัพธ์
ล้าง Cache และแก้ไขปัญหาที่พบ