การสร้าง products ใน Laravel อย่างละเอียด
1. สร้าง Database และ Migration
1.1 แก้ไขไฟล์ .env
กำหนดค่าการเชื่อมต่อฐานข้อมูลในไฟล์ .env:

env
คัดลอก
แก้ไข
DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=your_database_name
DB_USERNAME=your_database_user
DB_PASSWORD=your_database_password
1.2 สร้างตาราง products
รันคำสั่งต่อไปนี้เพื่อสร้างไฟล์ Migration สำหรับตาราง products:

bash
คัดลอก
แก้ไข
php artisan make:migration create_products_table
จากนั้นเปิดไฟล์ Migration ใน database/migrations (ชื่อไฟล์จะขึ้นต้นด้วย timestamp เช่น 2025_01_25_000000_create_products_table.php) และแก้ไขดังนี้:

php
คัดลอก
แก้ไข
public function up()
{
    Schema::create('products', function (Blueprint $table) {
        $table->id();
        $table->string('name');
        $table->text('description')->nullable();
        $table->decimal('price', 8, 2);
        $table->integer('stock_quantity');
        $table->string('sku')->unique();
        $table->timestamps();
    });
}
รันคำสั่งเพื่อสร้างตารางในฐานข้อมูล:

bash
คัดลอก
แก้ไข
php artisan migrate
2. สร้าง Model สำหรับ products
รันคำสั่งนี้เพื่อสร้าง Model:

bash
คัดลอก
แก้ไข
php artisan make:model Product
เปิดไฟล์ app/Models/Product.php และเพิ่ม $fillable เพื่อป้องกัน MassAssignmentException:

php
คัดลอก
แก้ไข
namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Product extends Model
{
    use HasFactory;

    protected $fillable = [
        'name',
        'description',
        'price',
        'stock_quantity',
        'sku',
    ];
}
3. สร้าง Controller
สร้าง Controller สำหรับจัดการ products:

bash
คัดลอก
แก้ไข
php artisan make:controller ProductController --resource
Controller จะถูกสร้างใน app/Http/Controllers/ProductController.php พร้อมกับฟังก์ชัน CRUD (index, create, store, show, edit, update, destroy).

4. เขียน Route
เพิ่ม Route ในไฟล์ routes/web.php:

php
คัดลอก
แก้ไข
use App\Http\Controllers\ProductController;

Route::resource('products', ProductController::class);
5. สร้าง Views สำหรับ products
สร้างไฟล์ Blade Template ในโฟลเดอร์ resources/views/products:

index.blade.php: แสดงรายการสินค้า
create.blade.php: แสดงฟอร์มเพิ่มสินค้า
edit.blade.php: แสดงฟอร์มแก้ไขสินค้า
ตัวอย่าง index.blade.php:

html
คัดลอก
แก้ไข
@extends('layouts.app')

@section('content')
<div class="container">
    <h1>Products</h1>
    <a href="{{ route('products.create') }}" class="btn btn-primary">Add Product</a>
    <table class="table mt-4">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Description</th>
                <th>Price</th>
                <th>Stock</th>
                <th>SKU</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach ($products as $product)
                <tr>
                    <td>{{ $product->id }}</td>
                    <td>{{ $product->name }}</td>
                    <td>{{ $product->description }}</td>
                    <td>{{ $product->price }}</td>
                    <td>{{ $product->stock_quantity }}</td>
                    <td>{{ $product->sku }}</td>
                    <td>
                        <a href="{{ route('products.show', $product->id) }}" class="btn btn-info btn-sm">View</a>
                        <a href="{{ route('products.edit', $product->id) }}" class="btn btn-warning btn-sm">Edit</a>
                        <form action="{{ route('products.destroy', $product->id) }}" method="POST" style="display:inline;">
                            @csrf
                            @method('DELETE')
                            <button type="submit" class="btn btn-danger btn-sm">Delete</button>
                        </form>
                    </td>
                </tr>
            @endforeach
        </tbody>
    </table>
</div>
@endsection
6. การเขียนฟังก์ชันใน Controller
ฟังก์ชันตัวอย่างใน ProductController:
php
คัดลอก
แก้ไข
namespace App\Http\Controllers;

use App\Models\Product;
use Illuminate\Http\Request;

class ProductController extends Controller
{
    public function index()
    {
        $products = Product::all();
        return view('products.index', compact('products'));
    }

    public function create()
    {
        return view('products.create');
    }

    public function store(Request $request)
    {
        $request->validate([
            'name' => 'required|string|max:255',
            'description' => 'nullable|string',
            'price' => 'required|numeric|min:0',
            'stock_quantity' => 'required|integer|min:0',
            'sku' => 'required|string|max:50|unique:products',
        ]);

        Product::create($request->all());
        return redirect()->route('products.index')->with('success', 'Product created successfully.');
    }

    public function edit($id)
    {
        $product = Product::findOrFail($id);
        return view('products.edit', compact('product'));
    }

    public function update(Request $request, $id)
    {
        $request->validate([
            'name' => 'required|string|max:255',
            'description' => 'nullable|string',
            'price' => 'required|numeric|min:0',
            'stock_quantity' => 'required|integer|min:0',
            'sku' => 'required|string|max:50|unique:products,sku,' . $id,
        ]);

        $product = Product::findOrFail($id);
        $product->update($request->all());

        return redirect()->route('products.index')->with('success', 'Product updated successfully.');
    }

    public function destroy($id)
    {
        $product = Product::findOrFail($id);
        $product->delete();
        return redirect()->route('products.index')->with('success', 'Product deleted successfully.');
    }
}
7. ทดสอบการทำงาน
รันเซิร์ฟเวอร์ด้วยคำสั่ง:

bash
คัดลอก
แก้ไข
php artisan serve
เปิดเบราว์เซอร์ไปที่:

arduino
คัดลอก
แก้ไข
http://127.0.0.1:8000/products
ทดลองเพิ่ม แก้ไข และลบ products.

สรุป
สร้างฐานข้อมูล: ใช้ Migration.
สร้าง Model: กำหนด $fillable.
สร้าง Controller: ใช้คำสั่ง php artisan make:controller.
เพิ่ม Routes: ใช้ Route::resource.
สร้าง Views: สร้างหน้า Blade Template.
เขียนฟังก์ชัน CRUD: ใน Controller.
ทดสอบการทำงาน: ใช้ URL ที่กำหนด.